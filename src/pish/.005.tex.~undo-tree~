(undo-tree-save-format-version . 1)
"74cc1b39c09bc77c4476aa9bb517a894b79e1136"
[nil nil nil nil (26716 59512 317196 877000) 0 nil]
([nil nil ((apply -3 209 278 undo--wrap-and-run-primitive-undo 209 278 ((209 . 212) 243 (t 26715 40779 138977 312000)))) nil (26716 59540 691524 644000) 0 nil] [nil nil ((apply -3 209 278 undo--wrap-and-run-primitive-undo 209 278 ((209 . 212) 243 (t 26715 40779 138977 312000)))) ((apply 3 209 275 undo--wrap-and-run-primitive-undo 209 275 ((#("%% " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 209) 243))) (26716 59512 316958 518000) 0 nil])
([nil nil ((apply 3 209 274 undo--wrap-and-run-primitive-undo 209 274 ((#("%% " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -209) 243))) nil (26716 59540 691524 444000) 0 nil])
nil
([nil nil ((apply -3 209 278 undo--wrap-and-run-primitive-undo 209 278 ((209 . 212) 243))) nil (26716 59540 691524 283000) 0 nil])
([nil nil ((apply 3 209 274 undo--wrap-and-run-primitive-undo 209 274 ((#("%% " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -209) 243))) nil (26716 59540 691523 963000) 0 nil])
([nil nil ((apply -3 209 278 undo--wrap-and-run-primitive-undo 209 278 ((209 . 212) 243))) nil (26716 59540 691523 432000) 0 nil])
([nil nil ((apply 3 209 274 undo--wrap-and-run-primitive-undo 209 274 ((#("%% " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -209) 243))) nil (26716 59585 82304 571000) 0 nil])
([nil nil ((245 . 290) 244) nil (26716 59639 380434 493000) 0 nil] [nil nil ((245 . 984) 244) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
 \"Inserts \\\\alink{<clipboard contents>} after the cursor position, then go to end of next line.
If cursor is ON a comma, insert before the comma instead.\"
 (interactive)
 (let ((clipboard-text (or (gui-get-selection 'CLIPBOARD)
                          (gui-get-selection 'PRIMARY)
                          (current-kill 0))))
   (when clipboard-text
     (if (eq (char-after) ?,)
         ;; Cursor is ON a comma, insert before it
         (insert (format \"\\\\alink{%s}\" clipboard-text))
       ;; Cursor is somewhere else, insert after cursor
       (progn
         (forward-char 1)
         (insert (format \"\\\\alink{%s}\" clipboard-text))))
     (forward-line 1)
     (end-of-line))))}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 61 (fontified t foreign-selection nil) 61 63 (face font-lock-warning-face fontified t foreign-selection nil) 63 511 (fontified t foreign-selection nil) 511 513 (face font-lock-warning-face fontified t foreign-selection nil) 513 519 (fontified t foreign-selection nil) 519 541 (face font-lock-comment-face fontified t foreign-selection nil) 541 663 (fontified t foreign-selection nil) 663 665 (face font-lock-warning-face fontified t foreign-selection nil) 665 671 (fontified t foreign-selection nil) 671 695 (face font-lock-comment-face fontified t foreign-selection nil) 695 738 (fontified t foreign-selection nil) 738 739 (fontified t)) . 245)) (26716 59585 82212 568000) 0 nil] [nil nil ((273 . 318) 244) ((#("\\alink{https://orcid.org/0000-0003-0200-8455}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 273)) (26716 59540 691606 628000) 0 nil])
([nil nil ((352 . 397)) nil (26716 59639 380434 133000) 0 nil])
nil
([nil nil ((352 . 397)) ((#("\\alink{https://orcid.org/0009-0001-3160-2528}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 352)) (26716 59540 691518 503000) 0 nil])
([nil nil ((434 . 479)) nil (26716 59639 380433 852000) 0 nil])
nil
([nil nil ((513 . 558) 512) nil (26716 59639 380433 602000) 0 nil])
([nil nil ((558 . 559) 481) nil (26716 59639 380433 171000) 0 nil])
([nil nil ((nil rear-nonsticky nil 572 . 573) (nil fontified nil 559 . 573) (559 . 573)) nil (26716 59639 380432 760000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 559)) nil (26716 59639 380432 309000) 0 nil])
([nil nil ((nil rear-nonsticky nil 577 . 578) (nil fontified nil 559 . 578) (559 . 578)) nil (26716 59639 380431 908000) 0 nil])
([nil nil ((558 . 559)) nil (26716 59639 380431 558000) 0 nil])
([nil nil ((131 . 133)) nil (26716 59639 380431 7000) 0 nil])
([nil nil ((nil rear-nonsticky nil 145 . 146) (nil fontified nil 133 . 146) (133 . 146) 132) nil (26716 59639 380430 546000) 0 nil])
([nil nil ((607 . 652) 606) nil (26716 59639 380425 667000) 0 nil])
([nil nil ((767 . 768) (#("
" 0 1 (fontified t)) . -767) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 696 (t 26716 59639 381320 433000)) nil (26716 59643 574218 125000) 0 nil])
([nil nil ((873 . 874) (#("
" 0 1 (fontified t)) . -873) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 872) nil (26716 59643 574209 88000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2904 . 2905) (#("
" 0 1 (fontified nil face (bold))) . -2936) (2904 . 2937) 2903 (t 26716 59643 582340 77000)) nil (26716 59678 920655 416000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 2922) (2923 . 2924) 2922) nil (26716 59678 920654 544000) 0 nil])
([nil nil ((#("У.А.Рыспаева" 0 12 (fontified t)) . 2924) (undo-tree-id25 . -11)) nil (26716 59678 920653 602000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2936 . 2937) (nil fontified nil 2924 . 2937) (2924 . 2937) 2923) nil (26716 59678 920651 689000) 0 nil])
([nil nil ((2904 . 2905) (#(";" 0 1 (fontified t)) . -2904) (undo-tree-id24 . -1) 2905 (2904 . 2905)) nil (26716 59678 920650 687000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5076 . 5077) (#("
" 0 1 (fontified nil)) . -5109) (5076 . 5110) 5075) nil (26716 59678 920649 54000) 0 nil])
([nil nil ((5076 . 5077)) nil (26716 59678 920648 162000) 0 nil])
([nil nil ((5221 . 5222) (#("
" 0 1 (face font-lock-string-face fontified t)) . -5221) (undo-tree-id23 . -1) 5185) nil (26716 59678 920647 200000) 0 nil])
([nil nil ((5331 . 5332) (#("
" 0 1 (face font-lock-string-face fontified t)) . -5331) (undo-tree-id22 . -1) 5330) nil (26716 59678 920641 920000) 0 nil])
([nil nil ((#("drying and grinding of beetroot and orange peel

{\\bfseries Raw material preparation}

Horse meat of the first grade and poultry meat are trimmed of fat,
films, and tendons and cut into pieces with raw mutton fat. The raw
material is cooled to a temperature of 0--2°C

{\\bfseries Grinding and minced meat preparation}

The meat is ground on a spinner with a hole diameter of 2--3 mm. Spices
and a mixture of dried beetroot powder and dried orange peel are added.
The minced meat is thoroughly mixed in the cutter until a homogeneous
consistency is obtained

{\\bfseries Forming of sausage loaves}

The minced meat is stuffed into a casing (natural or artificial) using a
syringe. The loaves are tied with twine and shaped according to the type
of sausage

{\\bfseries Settling}

The loaves are kept in a chamber at a temperature of 2--4°C and a
relative humidity of 85--90\\% for 2-4 hours to stabilize the structure
and enhance flavor and aroma

{\\bfseries Thermal processing}

Roast at 70-90 °C, 40-60 min. Cooking at 75-80 °C, 60-120 min (depending
on the diameter of the loaves). Temperature in the center of the loaf:
68--72 °C.71-72 °C

{\\bfseries Cooling}. Water temperature: 10--12 °C

Time: 10--15 minutes.

{\\bfseries Storage}

Boiled sausage is stored at a temperature of 0\\ldots4°C for no more than
5 days. Packaged products in vacuum packaging or modified gas
environments can be stored at a temperature of 0\\ldots2°C for up to 15
days. When frozen (-18°C), the storage period can reach up to 3 months
" 0 50 (fontified t) 50 59 (face font-lock-keyword-face fontified t) 59 84 (face (bold) fontified t) 84 270 (fontified t) 270 279 (face font-lock-keyword-face fontified t) 279 316 (face (bold) fontified t) 316 559 (fontified t) 559 568 (face font-lock-keyword-face fontified t) 568 594 (face (bold) fontified t) 594 756 (fontified t) 756 765 (face font-lock-keyword-face fontified t) 765 774 (face (bold) fontified t) 774 870 (fontified t) 870 872 (face font-lock-keyword-face fontified t) 872 945 (fontified t) 945 954 (face font-lock-keyword-face fontified t) 954 973 (face (bold) fontified t) 973 1141 (fontified t) 1141 1150 (face font-lock-keyword-face fontified t) 1150 1158 (face (bold) fontified t) 1158 1215 (fontified t) 1215 1224 (face font-lock-keyword-face fontified t) 1224 1232 (face (bold) fontified t) 1232 1281 (fontified t) 1281 1287 (face font-lock-keyword-face fontified t) 1287 1418 (fontified t) 1418 1424 (face font-lock-keyword-face fontified t) 1424 1496 (fontified t) 1496 1512 (fontified t)) . 38868) (undo-tree-id104 . -1441) (undo-tree-id105 . -776) (undo-tree-id106 . -1511) (undo-tree-id107 . -32) (undo-tree-id108 . -1441) (undo-tree-id109 . -32) (undo-tree-id110 . -48) (undo-tree-id111 . -86) (undo-tree-id112 . -268) (undo-tree-id113 . -318) (undo-tree-id114 . -557) (undo-tree-id115 . -596) (undo-tree-id116 . -754) (undo-tree-id117 . -776) (undo-tree-id118 . -943) (undo-tree-id119 . -975) (undo-tree-id120 . -1139) (undo-tree-id121 . -1190) (undo-tree-id122 . -1213) (undo-tree-id123 . -1234) (undo-tree-id124 . -1213) (undo-tree-id125 . -1190) (undo-tree-id126 . -1441) 40309 (t 26716 59678 923507 432000)) nil (26716 59761 706891 515000) 0 nil])
([nil nil ((#("

%% \\begin{figure}[H]
%% 	\\centering
%% 	\\includegraphics[width=0.8\\textwidth]{media/pish/image15}
%% 	\\caption*{}
%% \\end{figure}



%% \\begin{figure}[H]
%% 	\\centering
%% 	\\includegraphics[width=0.8\\textwidth]{media/pish/image15}
%% 	\\caption*{}
%% \\end{figure}



%% \\begin{figure}[H]
%% 	\\centering
%% 	\\includegraphics[width=0.8\\textwidth]{media/pish/image15}
%% 	\\caption*{}
%% \\end{figure}



%% \\begin{figure}[H]
%% 	\\centering
%% 	\\includegraphics[width=0.8\\textwidth]{media/pish/image15}
%% 	\\caption*{}
%% \\end{figure}



%% \\begin{figure}[H]
%% 	\\centering
%% 	\\includegraphics[width=0.8\\textwidth]{media/pish/image15}
%% 	\\caption*{}
%% \\end{figure}



%% \\begin{figure}[H]
%% 	\\centering
%% 	\\includegraphics[width=0.8\\textwidth]{media/pish/image15}
%% 	\\caption*{}
%% \\end{figure}



%% \\begin{figure}[H]
%% 	\\centering
%% 	\\includegraphics[width=0.8\\textwidth]{media/pish/image15}
%% 	\\caption*{}
%% \\end{figure}



%% \\begin{figure}[H]
%% 	\\centering
%% 	\\includegraphics[width=0.8\\textwidth]{media/pish/image15}
%% 	\\caption*{}
%% \\end{figure}
" 0 2 (fontified t) 2 5 (face font-lock-comment-delimiter-face fontified t) 5 11 (face font-lock-comment-face fontified t) 11 19 (face font-lock-comment-face fontified t latex-env-pair t) 19 23 (face font-lock-comment-face fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 38 (face font-lock-comment-face fontified t) 38 41 (face font-lock-comment-delimiter-face fontified t) 41 100 (face font-lock-comment-face fontified t) 100 103 (face font-lock-comment-delimiter-face fontified t) 103 116 (face font-lock-comment-face fontified t) 116 119 (face font-lock-comment-delimiter-face fontified t) 119 123 (face font-lock-comment-face fontified t) 123 131 (face font-lock-comment-face fontified t latex-env-pair t) 131 132 (face font-lock-comment-face fontified t) 132 135 (fontified t) 135 138 (face font-lock-comment-delimiter-face fontified t) 138 144 (face font-lock-comment-face fontified t) 144 152 (face font-lock-comment-face fontified t latex-env-pair t) 152 156 (face font-lock-comment-face fontified t) 156 159 (face font-lock-comment-delimiter-face fontified t) 159 171 (face font-lock-comment-face fontified t) 171 174 (face font-lock-comment-delimiter-face fontified t) 174 233 (face font-lock-comment-face fontified t) 233 236 (face font-lock-comment-delimiter-face fontified t) 236 249 (face font-lock-comment-face fontified t) 249 252 (face font-lock-comment-delimiter-face fontified t) 252 256 (face font-lock-comment-face fontified t) 256 264 (face font-lock-comment-face fontified t latex-env-pair t) 264 265 (face font-lock-comment-face fontified t) 265 268 (fontified t) 268 271 (face font-lock-comment-delimiter-face fontified t) 271 277 (face font-lock-comment-face fontified t) 277 285 (face font-lock-comment-face fontified t latex-env-pair t) 285 289 (face font-lock-comment-face fontified t) 289 292 (face font-lock-comment-delimiter-face fontified t) 292 304 (face font-lock-comment-face fontified t) 304 307 (face font-lock-comment-delimiter-face fontified t) 307 366 (face font-lock-comment-face fontified t) 366 369 (face font-lock-comment-delimiter-face fontified t) 369 382 (face font-lock-comment-face fontified t) 382 385 (face font-lock-comment-delimiter-face fontified t) 385 389 (face font-lock-comment-face fontified t) 389 397 (face font-lock-comment-face fontified t latex-env-pair t) 397 398 (face font-lock-comment-face fontified t) 398 401 (fontified t) 401 404 (face font-lock-comment-delimiter-face fontified t) 404 410 (face font-lock-comment-face fontified t) 410 418 (face font-lock-comment-face fontified t latex-env-pair t) 418 422 (face font-lock-comment-face fontified t) 422 425 (face font-lock-comment-delimiter-face fontified t) 425 437 (face font-lock-comment-face fontified t) 437 440 (face font-lock-comment-delimiter-face fontified t) 440 499 (face font-lock-comment-face fontified t) 499 502 (face font-lock-comment-delimiter-face fontified t) 502 515 (face font-lock-comment-face fontified t) 515 518 (face font-lock-comment-delimiter-face fontified t) 518 522 (face font-lock-comment-face fontified t) 522 530 (face font-lock-comment-face fontified t latex-env-pair t) 530 531 (face font-lock-comment-face fontified t) 531 534 (fontified t) 534 537 (face font-lock-comment-delimiter-face fontified t) 537 543 (face font-lock-comment-face fontified t) 543 551 (face font-lock-comment-face fontified t latex-env-pair t) 551 555 (face font-lock-comment-face fontified t) 555 558 (face font-lock-comment-delimiter-face fontified t) 558 570 (face font-lock-comment-face fontified t) 570 573 (face font-lock-comment-delimiter-face fontified t) 573 632 (face font-lock-comment-face fontified t) 632 635 (face font-lock-comment-delimiter-face fontified t) 635 648 (face font-lock-comment-face fontified t) 648 651 (face font-lock-comment-delimiter-face fontified t) 651 655 (face font-lock-comment-face fontified t) 655 663 (face font-lock-comment-face fontified t latex-env-pair t) 663 664 (face font-lock-comment-face fontified t) 664 667 (fontified t) 667 670 (face font-lock-comment-delimiter-face fontified t) 670 676 (face font-lock-comment-face fontified t) 676 684 (face font-lock-comment-face fontified t latex-env-pair t) 684 688 (face font-lock-comment-face fontified t) 688 691 (face font-lock-comment-delimiter-face fontified t) 691 703 (face font-lock-comment-face fontified t) 703 706 (face font-lock-comment-delimiter-face fontified t) 706 765 (face font-lock-comment-face fontified t) 765 768 (face font-lock-comment-delimiter-face fontified t) 768 781 (face font-lock-comment-face fontified t) 781 784 (face font-lock-comment-delimiter-face fontified t) 784 788 (face font-lock-comment-face fontified t) 788 796 (face font-lock-comment-face fontified t latex-env-pair t) 796 797 (face font-lock-comment-face fontified t) 797 800 (fontified t) 800 803 (face font-lock-comment-delimiter-face fontified t) 803 809 (face font-lock-comment-face fontified t) 809 817 (face font-lock-comment-face fontified t latex-env-pair t) 817 821 (face font-lock-comment-face fontified t) 821 824 (face font-lock-comment-delimiter-face fontified t) 824 836 (face font-lock-comment-face fontified t) 836 839 (face font-lock-comment-delimiter-face fontified t) 839 898 (face font-lock-comment-face fontified t) 898 901 (face font-lock-comment-delimiter-face fontified t) 901 914 (face font-lock-comment-face fontified t) 914 917 (face font-lock-comment-delimiter-face fontified t) 917 921 (face font-lock-comment-face fontified t) 921 929 (face font-lock-comment-face fontified t latex-env-pair t) 929 930 (face font-lock-comment-face fontified t) 930 933 (fontified t) 933 936 (face font-lock-comment-delimiter-face fontified t) 936 942 (face font-lock-comment-face fontified t) 942 950 (face font-lock-comment-face fontified t latex-env-pair t) 950 954 (face font-lock-comment-face fontified t) 954 957 (face font-lock-comment-delimiter-face fontified t) 957 969 (face font-lock-comment-face fontified t) 969 972 (face font-lock-comment-delimiter-face fontified t) 972 1031 (face font-lock-comment-face fontified t) 1031 1034 (face font-lock-comment-delimiter-face fontified t) 1034 1047 (face font-lock-comment-face fontified t) 1047 1050 (face font-lock-comment-delimiter-face fontified t) 1050 1054 (face font-lock-comment-face fontified t) 1054 1062 (face font-lock-comment-face fontified t latex-env-pair t) 1062 1063 (face font-lock-comment-face fontified t)) . 38884) (undo-tree-id63 . -1047) (undo-tree-id64 . -836) (undo-tree-id65 . -1062) (undo-tree-id66 . -1047) (undo-tree-id67 . -800) (undo-tree-id68 . -1063) (undo-tree-id69 . -1063) (undo-tree-id70 . -1063) (undo-tree-id71 . -1063) (undo-tree-id72 . -1063) (undo-tree-id73 . -1063) (undo-tree-id74 . -1047) (undo-tree-id75 . -1047) (undo-tree-id76 . -1047) (undo-tree-id77 . -1047) (undo-tree-id78 . -1047) (undo-tree-id79 . -1047) (undo-tree-id80 . -1047) (undo-tree-id81 . -1047) (undo-tree-id82 . -1047) (undo-tree-id83 . -1047) (undo-tree-id84 . -1047) (undo-tree-id85 . -1047) (undo-tree-id86 . -1047) (undo-tree-id87 . -1047) (undo-tree-id88 . -1047) (undo-tree-id89 . -1047) (undo-tree-id90 . -1047) (undo-tree-id91 . -1047) (undo-tree-id92 . -1047) (undo-tree-id93 . -1047) (undo-tree-id94 . -1047) (undo-tree-id95 . -1047) (undo-tree-id96 . -1047) (undo-tree-id97 . -1047) (undo-tree-id98 . -1047) (undo-tree-id99 . -1047) (undo-tree-id100 . -1047) (undo-tree-id101 . -1047) (undo-tree-id102 . -1047) (undo-tree-id103 . -1063) 39931) nil (26716 59761 706882 979000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 38867) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1)) nil (26716 59761 706866 959000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -39024) (undo-tree-id127 . -1) (undo-tree-id128 . -1) 38884 (t 26716 59761 707913 74000)) nil (26716 59763 276080 48000) 0 nil])
([nil nil ((39024 . 39025) (t 26716 59763 277920 938000) 39023) nil (26716 59792 903057 660000) 0 nil])
([nil nil ((43227 . 43229) (t 26716 59765 914934 160000)) nil (26716 59798 636244 879000) 0 nil] [nil nil ((43221 . 43223) (t 26716 59765 914934 160000)) ((#("\\\\" 0 2 (face font-lock-string-face fontified t)) . 43221) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1)) (26716 59792 902740 674000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-string-face fontified t)) . 43227) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1)) nil (26716 59798 636243 757000) 0 nil])
nil
([nil nil ((#("-" 0 1 (face font-lock-string-face fontified t)) . 43227) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1)) nil (26716 59798 636222 207000) 0 nil])
([nil nil ((43228 . 43230)) nil (26716 59798 636139 240000) 0 nil])
([nil nil ((43340 . 43341) (t 26716 59798 638099 596000)) nil (26716 59808 656653 713000) 0 nil])
([nil nil ((43342 . 43344) (t 26716 59808 659150 752000)) nil (26716 59813 211378 739000) 0 nil])
([nil nil ((44550 . 44552) (t 26716 59813 213174 74000)) nil (26716 59823 822252 896000) 0 nil])
([nil nil ((nil rear-nonsticky nil 44574 . 44575) (nil fontified nil 44552 . 44575) (44552 . 44575) (#("ulzhan.ryspaeva@bk.ru" 0 6 (fontified t) 6 21 (fontified t)) . 44552) (undo-tree-id282 . -21) (undo-tree-id283 . 21) (undo-tree-id284 . -20) (undo-tree-id285 . -20) (undo-tree-id286 . -20) 44573 (t 26716 59823 825228 599000)) nil (26716 59861 672683 408000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 44573) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1)) nil (26716 59861 672680 252000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 44570) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1)) nil (26716 59861 672673 870000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-warning-face fontified t)) . 44550) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1)) nil (26716 59861 672667 718000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-keyword-face fontified t)) . 44550) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1)) nil (26716 59862 447552 918000) 0 nil])
([nil nil ((nil rear-nonsticky nil 43596 . 43597) (nil fontified nil 43576 . 43597) (43576 . 43597) (#("ulzhan.ryspaeva@bk.ru" 0 5 (fontified t) 5 21 (fontified t)) . 43576) (undo-tree-id319 . -21) (undo-tree-id320 . -20) (undo-tree-id321 . -20) (undo-tree-id322 . -21) (undo-tree-id323 . -21) (undo-tree-id324 . -20) (undo-tree-id325 . -20) (undo-tree-id326 . -20) (undo-tree-id327 . -20) (undo-tree-id328 . -20) (undo-tree-id329 . -20) (undo-tree-id330 . -20) (undo-tree-id331 . -20) (undo-tree-id332 . -20) (undo-tree-id333 . -20) (undo-tree-id334 . -20) (undo-tree-id335 . -20) (undo-tree-id336 . -20) (undo-tree-id337 . -20) (undo-tree-id338 . -20) (undo-tree-id339 . -20) (undo-tree-id340 . -21) (undo-tree-id341 . -21) 43597 (t 26716 59861 674425 16000)) nil (26716 59869 74565 131000) 0 nil] [nil nil ((#("kalitova 03@ mail.ru;" 0 8 (fontified t) 8 20 (fontified t) 20 21 (rear-nonsticky t fontified t)) . 44550) (undo-tree-id287 . -20) (undo-tree-id288 . -20) (undo-tree-id289 . -20) (undo-tree-id290 . -20) (undo-tree-id291 . -20) (undo-tree-id292 . -20) (undo-tree-id293 . -20) (undo-tree-id294 . -20) (undo-tree-id295 . -20) (undo-tree-id296 . -20) (undo-tree-id297 . -20) (undo-tree-id298 . -20) (undo-tree-id299 . -20) (undo-tree-id300 . -18) (undo-tree-id301 . -18) (undo-tree-id302 . -18) (undo-tree-id303 . -18) (undo-tree-id304 . -18) (undo-tree-id305 . -18) (undo-tree-id306 . -18) (undo-tree-id307 . -18) (undo-tree-id308 . -18) (undo-tree-id309 . -18) (undo-tree-id310 . -18) (undo-tree-id311 . -18) (undo-tree-id312 . -18) (undo-tree-id313 . -18) (undo-tree-id314 . -18) (undo-tree-id315 . -18) (undo-tree-id316 . -18) (undo-tree-id317 . -21) (undo-tree-id318 . -21) (t 26716 59861 674425 16000)) ((44550 . 44571)) (26716 59862 447299 972000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 43584) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (t 26716 59869 77463 778000)) nil (26716 59882 602168 518000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . 43587)) nil (26716 59882 602166 44000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 44560) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1)) nil (26716 59882 602165 242000) 0 nil])
([nil current ((#(" " 0 1 (fontified t)) . 44556) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1)) nil (26716 59882 602157 808000) 0 nil])
nil
