(undo-tree-save-format-version . 1)
"cefb8e1b20983c4f88392f33c1b8fb6ea40a4326"
[nil nil nil nil (26716 22195 707967 614000) 0 nil]
([nil nil ((192 . 193) (t 26715 48619 482412 411000)) nil (26716 22577 195898 945000) 0 nil])
([nil nil ((177 . 178) (#(" " 0 1 (face (bold) fontified t)) . 177)) ((177 . 178) (#("
" 0 1 (face (bold) fontified t)) . 177) (undo-tree-id8 . -1)) (26716 22580 249040 582000) 0 nil])
([nil nil ((192 . 237) 191) nil (26716 22615 866475 795000) 0 nil] [nil nil ((192 . 1209)) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
  \"Inserts a LaTeX \\\\alink{} link with the clipboard text before the first backslash (\\\\) on the current line, if any, then moves to the next line.\"
  (interactive)
  (let ((clipboard-text (gui-get-selection 'PRIMARY)))
    (save-excursion
      (let ((line-end (line-end-position))
            (line-start (line-beginning-position))
            (backslash-pos nil))
        ;; Find first backslash position on the line
        (goto-char line-start)
        (when (re-search-forward \"\\\\\\\\\" line-end t)
          (setq backslash-pos (match-beginning 0)))

        ;; Insert \\alink{} before the first backslash if found
        (if backslash-pos
            (progn
              (goto-char backslash-pos)
              (insert (format \"\\\\alink{%s}\" clipboard-text)))
          ;; Else insert at end of line
          (goto-char line-end)
          (insert (format \"\\\\alink{%s}\" clipboard-text)))))
    ;; Move cursor to beginning of next line
    (forward-line 1)))
}" 0 6 (face font-lock-keyword-face fontified t) 6 70 (fontified t) 70 72 (face font-lock-warning-face fontified t) 72 137 (fontified t) 137 139 (face font-lock-warning-face fontified t) 139 536 (fontified t) 536 538 (face font-lock-warning-face fontified t) 538 540 (face font-lock-warning-face fontified t) 540 625 (fontified t) 625 631 (face font-lock-keyword-face fontified t) 631 786 (fontified t) 786 788 (face font-lock-warning-face fontified t) 788 794 (fontified t) 794 817 (face font-lock-comment-face fontified t) 817 915 (fontified t) 915 917 (face font-lock-warning-face fontified t) 917 923 (fontified t) 923 948 (face font-lock-comment-face fontified t) 948 1017 (fontified t)) . 192) (undo-tree-id9 . -51)) (26716 22578 987132 944000) 0 nil] [nil nil ((192 . 1209) 191) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
  \"Inserts a LaTeX \\\\alink{} link with the clipboard text before the first backslash (\\\\) on the current line, if any, then moves to the next line.\"
  (interactive)
  (let ((clipboard-text (gui-get-selection 'PRIMARY)))
    (save-excursion
      (let ((line-end (line-end-position))
            (line-start (line-beginning-position))
            (backslash-pos nil))
        ;; Find first backslash position on the line
        (goto-char line-start)
        (when (re-search-forward \"\\\\\\\\\" line-end t)
          (setq backslash-pos (match-beginning 0)))

        ;; Insert \\alink{} before the first backslash if found
        (if backslash-pos
            (progn
              (goto-char backslash-pos)
              (insert (format \"\\\\alink{%s}\" clipboard-text)))
          ;; Else insert at end of line
          (goto-char line-end)
          (insert (format \"\\\\alink{%s}\" clipboard-text)))))
    ;; Move cursor to beginning of next line
    (forward-line 1)))
}" 0 6 (face font-lock-keyword-face fontified t) 6 70 (fontified t) 70 72 (face font-lock-warning-face fontified t) 72 137 (fontified t) 137 139 (face font-lock-warning-face fontified t) 139 536 (fontified t) 536 538 (face font-lock-warning-face fontified t) 538 540 (face font-lock-warning-face fontified t) 540 625 (fontified t) 625 631 (face font-lock-keyword-face fontified t) 631 786 (fontified t) 786 788 (face font-lock-warning-face fontified t) 788 794 (fontified t) 794 817 (face font-lock-comment-face fontified t) 817 915 (fontified t) 915 917 (face font-lock-warning-face fontified t) 917 923 (fontified t) 923 948 (face font-lock-comment-face fontified t) 948 1017 (fontified t)) . 192) (undo-tree-id0 . -51) (undo-tree-id1 . -51) (undo-tree-id2 . -51) (undo-tree-id3 . -51)) (26716 22572 89348 16000) 0 nil] [nil nil ((192 . 237) 191) ((#("\\alink{https://orcid.org/0000-0002-0957-1796}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 192) (t 26716 22195 708384 612000)) (26716 22195 707962 124000) 0 nil])
([nil nil ((#("Dataset Description" 0 19 (face (italic) fontified t)) . 13233) (undo-tree-id0 . -18) (t 26716 51261 441280 711000)) nil (26718 18023 917801 734000) 0 nil])
nil
nil
nil
([nil nil ((nil rear-nonsticky nil 11959 . 11960) (nil fontified nil 11941 . 11960) (11941 . 11960)) nil (26718 18031 213362 823000) 0 nil] [nil nil ((nil rear-nonsticky nil 11930 . 11931) (nil fontified nil 11912 . 11931) (11912 . 11931) 11911) ((#("Dataset Description" 0 18 (fontified nil) 18 19 (rear-nonsticky nil fontified nil)) . 11912) (undo-tree-id1 . -18) (undo-tree-id2 . -18) (undo-tree-id3 . -18) (undo-tree-id4 . -18) (nil rear-nonsticky t 11930 . 11931)) (26718 18023 917686 507000) 0 nil])
([nil nil ((11940 . 11941) 11909) nil (26718 18031 213362 372000) 0 nil])
nil
([nil nil ((11961 . 11962) 11942) nil (26718 18031 213362 132000) 0 nil])
([nil nil ((11942 . 11973) (#("Dataset Description
" 0 18 (fontified t) 18 19 (rear-nonsticky t fontified t) 19 20 (fontified t)) . -11942) (undo-tree-id7 . -18) 11962) nil (26718 18031 213361 621000) 0 nil])
([nil nil ((11973 . 11974) 11942) nil (26718 18031 213360 609000) 0 nil])
([nil nil ((#("	\\caption*{\\emph{}}
" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 20 (fontified t)) . 13249) (undo-tree-id5 . -19) (undo-tree-id6 . -20)) nil (26718 18031 213357 242000) 0 nil])
([nil nil ((11942 . 11948) (t 26718 18031 214158 38000)) nil (26718 18048 944807 736000) 0 nil])
([nil nil ((11979 . 11980)) nil (26718 18104 706009 72000) 0 nil])
([nil nil ((#("45" 0 2 (fontified t)) . 19654) (t 26718 18048 946271 207000) (19656 . 19658) 19655 (t 26718 18048 946271 207000)) nil (26718 18127 816390 940000) 0 nil] [nil nil ((#("—" 0 1 (fontified t)) . 19773) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (t 26718 18048 946271 207000)) ((19773 . 19774)) (26718 18104 705776 184000) 0 nil] [nil nil ((#("—" 0 1 (fontified t)) . 19500) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (t 26718 18048 946271 207000)) ((19500 . 19501)) (26718 18103 265883 978000) 0 nil])
([nil nil ((nil fontified t 19654 . 19656) (#("46" 0 2 (fontified t)) . 19654) (19656 . 19658) 19655) nil (26718 18127 816389 958000) 0 nil])
nil
nil
([nil nil ((nil fontified t 19654 . 19656) (#("47" 0 2 (fontified t)) . 19654) (19656 . 19658) 19655) nil (26718 18127 816389 498000) 0 nil])
([nil nil ((nil fontified t 19654 . 19656) (#("48" 0 2 (fontified t)) . 19654) (19656 . 19658) 19655) nil (26718 18127 816387 414000) 0 nil])
([nil nil ((#("45" 0 2 (fontified t)) . 19381) (19383 . 19385) 19382) nil (26718 18127 816385 610000) 0 nil])
([nil nil ((nil fontified t 19381 . 19383) (#("46" 0 2 (fontified t)) . 19381) (19383 . 19385) 19382) nil (26718 18127 816384 418000) 0 nil])
([nil nil ((nil fontified t 19381 . 19383) (#("47" 0 2 (fontified t)) . 19381) (19383 . 19385) 19382) nil (26718 18127 816383 536000) 0 nil])
([nil nil ((nil fontified t 19381 . 19383) (#("48" 0 2 (fontified t)) . 19381) (19383 . 19385) 19382) nil (26718 18127 816382 755000) 0 nil])
([nil nil ((#("    \\hfill
" 0 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t)) . 19616) (undo-tree-id12 . -10) (undo-tree-id13 . -9) (undo-tree-id14 . -9) (undo-tree-id15 . -9) (undo-tree-id16 . -9) (undo-tree-id17 . -9) (undo-tree-id18 . -9) (undo-tree-id19 . -9) (undo-tree-id20 . -9) (undo-tree-id21 . -9) (undo-tree-id22 . -9) (undo-tree-id23 . -9) (undo-tree-id24 . -9) (undo-tree-id25 . -9) (undo-tree-id26 . -9) (undo-tree-id27 . -9) (undo-tree-id28 . -9) (undo-tree-id29 . -9) (undo-tree-id30 . -9) (undo-tree-id31 . -9) (undo-tree-id32 . -9) (undo-tree-id33 . -9) (undo-tree-id34 . -9) (undo-tree-id35 . -9) (undo-tree-id36 . -9) (undo-tree-id37 . -9) (undo-tree-id38 . -9) (undo-tree-id39 . -9) (undo-tree-id40 . -9) (undo-tree-id41 . -9) (undo-tree-id42 . -9) (undo-tree-id43 . -9) (undo-tree-id44 . -9) (undo-tree-id45 . -9) (undo-tree-id46 . -9) (undo-tree-id47 . -9) (undo-tree-id48 . -9) (undo-tree-id49 . -9) (undo-tree-id50 . -9) (undo-tree-id51 . -9) (undo-tree-id52 . -9) (undo-tree-id53 . -9) (undo-tree-id54 . -9) (undo-tree-id55 . -9) (undo-tree-id56 . -9) (undo-tree-id57 . -9) (undo-tree-id58 . -9) (undo-tree-id59 . -11) 19625) nil (26718 18161 564282 579000) 0 nil])
([nil nil ((19500 . 19501)) nil (26718 18164 256931 54000) 0 nil] [nil nil ((19500 . 19501) (t 26718 18127 824764 889000)) ((#("\\" 0 1 (face font-lock-keyword-face fontified t)) . 19500)) (26718 18161 192734 637000) 0 nil])
([nil nil ((19763 . 19764)) nil (26718 18164 256926 816000) 0 nil])
([nil nil ((19763 . 19764)) ((#("\\" 0 1 (face font-lock-keyword-face fontified t)) . 19763) (t 26718 18139 74834 86000)) (26718 18139 73776 517000) 0 nil])
([nil nil ((#("—" 0 1 (fontified t)) . 19764) (undo-tree-id62 . 1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (t 26718 18164 258987 969000)) nil (26718 18237 429049 928000) 0 nil])
nil
([nil nil ((#("—" 0 1 (fontified t)) . 19501) (undo-tree-id60 . -1) (undo-tree-id61 . -1)) nil (26718 18237 429044 819000) 0 nil])
([nil nil ((#("\\emph{Good/Not Good Analysis}" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 28 (face (italic) fontified t) 28 29 (fontified t)) . 19565) (undo-tree-id128 . -28) (undo-tree-id129 . -1) 19566 (t 26718 18237 431427 635000)) nil (26718 18347 549173 477000) 0 nil])
([nil nil ((19886 . 19887) 19884) nil (26718 18347 549172 365000) 0 nil])
([nil nil ((nil rear-nonsticky nil 19915 . 19916) (nil fontified nil 19887 . 19916) (19887 . 19916)) nil (26718 18347 549172 144000) 0 nil])
([nil nil ((19916 . 19917) 19915) nil (26718 18347 549171 813000) 0 nil])
([nil nil ((19893 . 19927) (#("Good/Not Good Analysis" 0 22 (face (italic) fontified t)) . -19893) (undo-tree-id124 . -22) (undo-tree-id125 . -21) (undo-tree-id126 . -21) (undo-tree-id127 . -21) 19915) nil (26718 18347 549171 443000) 0 nil])
([nil nil ((#("        \\caption*{}
" 0 8 (fontified t) 8 17 (face font-lock-keyword-face fontified t) 17 18 (fontified t) 18 20 (fontified t)) . 19547) (undo-tree-id122 . -19) (undo-tree-id123 . -18) 19565) nil (26718 18347 549169 669000) 0 nil])
([nil nil ((#("\\emph{Prediction Accuracies}" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 27 (face (italic) fontified t) 27 28 (fontified t)) . 19782) (undo-tree-id120 . -27) (undo-tree-id121 . -28)) nil (26718 18347 549168 698000) 0 nil])
([nil nil ((nil rear-nonsticky nil 20849 . 20850) (nil fontified nil 20822 . 20850) (20822 . 20850)) nil (26718 18347 549167 696000) 0 nil])
([nil nil ((20821 . 20822) 20782) nil (26718 18347 549167 325000) 0 nil])
([nil nil ((20851 . 20852) 20823) nil (26718 18347 549167 4000) 0 nil])
([nil nil ((20829 . 20862) (#("Prediction Accuracies" 0 21 (face (italic) fontified t)) . -20829) (undo-tree-id69 . -21) (undo-tree-id70 . -20) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -20) (undo-tree-id79 . -20) (undo-tree-id80 . -20) (undo-tree-id81 . -20) (undo-tree-id82 . -20) (undo-tree-id83 . -20) (undo-tree-id84 . -20) (undo-tree-id85 . -20) (undo-tree-id86 . -20) (undo-tree-id87 . -20) (undo-tree-id88 . -20) (undo-tree-id89 . -20) (undo-tree-id90 . -20) (undo-tree-id91 . -20) (undo-tree-id92 . -20) (undo-tree-id93 . -20) (undo-tree-id94 . -20) (undo-tree-id95 . -20) (undo-tree-id96 . -20) (undo-tree-id97 . -20) (undo-tree-id98 . -20) (undo-tree-id99 . -20) (undo-tree-id100 . -20) (undo-tree-id101 . -20) (undo-tree-id102 . -20) (undo-tree-id103 . -20) (undo-tree-id104 . -20) (undo-tree-id105 . -20) (undo-tree-id106 . -20) (undo-tree-id107 . -20) (undo-tree-id108 . -20) (undo-tree-id109 . -20) (undo-tree-id110 . -20) (undo-tree-id111 . -20) (undo-tree-id112 . -20) (undo-tree-id113 . -20) (undo-tree-id114 . -20) (undo-tree-id115 . -20) (undo-tree-id116 . -20) (undo-tree-id117 . -20) (undo-tree-id118 . -20) (undo-tree-id119 . -21) 20850) nil (26718 18347 549165 752000) 0 nil])
([nil nil ((#("        \\caption*{}
" 0 8 (fontified t) 8 17 (face font-lock-keyword-face fontified t) 17 18 (fontified t) 18 20 (fontified t)) . 19764) (undo-tree-id65 . -19) (undo-tree-id66 . -18) (undo-tree-id67 . -18) (undo-tree-id68 . -20)) nil (26718 18347 549145 734000) 0 nil])
([nil current ((#("Malaysian Online Journal of Instructional Technology

ISSN: 1823-1144

Vol.2, No.1, April 2005

Malaysian Online Journal of Instructional Technology

ISSN: 1823-1144

Vol.2, No.1, April 2005

Malaysian Online Journal of Instructional Technology

ISSN: 1823-1144

Vol.2, No.1, April 2005

Malaysian Online Journal of Instructional Technology

ISSN: 1823-1144

Vol.2, No.1, April 200

" 0 175 (fontified t) 175 191 (fontified t) 191 383 (fontified t)) . 25463) (undo-tree-id130 . -382) (undo-tree-id131 . -382) (undo-tree-id132 . -382) (undo-tree-id133 . -70) (undo-tree-id134 . -53) (undo-tree-id135 . -53) (undo-tree-id136 . -70) (undo-tree-id137 . -70) (undo-tree-id138 . -95) (undo-tree-id139 . -95) (undo-tree-id140 . -149) (undo-tree-id141 . -53) (undo-tree-id142 . -53) (undo-tree-id143 . -53) (undo-tree-id144 . -53) (undo-tree-id145 . -53) (undo-tree-id146 . -53) (undo-tree-id147 . -53) (undo-tree-id148 . -53) (undo-tree-id149 . -53) (undo-tree-id150 . -53) (undo-tree-id151 . -53) (undo-tree-id152 . -53) (undo-tree-id153 . -53) (undo-tree-id154 . -53) (undo-tree-id155 . -53) (undo-tree-id156 . -53) (undo-tree-id157 . -70) (undo-tree-id158 . -70) (undo-tree-id159 . -70) (undo-tree-id160 . -70) (undo-tree-id161 . -70) (undo-tree-id162 . -70) (undo-tree-id163 . -95) (undo-tree-id164 . -95) (undo-tree-id165 . -95) (undo-tree-id166 . -95) (undo-tree-id167 . -95) (undo-tree-id168 . -95) (undo-tree-id169 . -149) (undo-tree-id170 . -149) (undo-tree-id171 . -149) (undo-tree-id172 . -149) (undo-tree-id173 . -149) (undo-tree-id174 . -149) (undo-tree-id175 . -149) (undo-tree-id176 . -149) (undo-tree-id177 . -149) (undo-tree-id178 . -149) (undo-tree-id179 . -149) (undo-tree-id180 . -149) (undo-tree-id181 . -149) (undo-tree-id182 . -149) (undo-tree-id183 . -149) (undo-tree-id184 . -149) (undo-tree-id185 . -166) (undo-tree-id186 . -166) (undo-tree-id187 . -166) (undo-tree-id188 . -166) (undo-tree-id189 . -166) (undo-tree-id190 . -166) (undo-tree-id191 . -166) (undo-tree-id192 . -166) (undo-tree-id193 . -166) (undo-tree-id194 . -166) (undo-tree-id195 . -166) (undo-tree-id196 . -166) (undo-tree-id197 . -166) (undo-tree-id198 . -166) (undo-tree-id199 . -166) (undo-tree-id200 . -166) (undo-tree-id201 . -191) (undo-tree-id202 . -191) (undo-tree-id203 . -191) (undo-tree-id204 . -191) (undo-tree-id205 . -191) (undo-tree-id206 . -191) (undo-tree-id207 . -191) (undo-tree-id208 . -245) (undo-tree-id209 . -245) (undo-tree-id210 . -245) (undo-tree-id211 . -245) (undo-tree-id212 . -245) (undo-tree-id213 . -245) (undo-tree-id214 . -245) (undo-tree-id215 . -262) (undo-tree-id216 . -262) (undo-tree-id217 . -262) (undo-tree-id218 . -262) (undo-tree-id219 . -262) (undo-tree-id220 . -262) (undo-tree-id221 . -262) (undo-tree-id222 . -287) (undo-tree-id223 . -287) (undo-tree-id224 . -287) (undo-tree-id225 . -287) (undo-tree-id226 . -287) (undo-tree-id227 . -287) (undo-tree-id228 . -287) (undo-tree-id229 . -341) (undo-tree-id230 . -341) (undo-tree-id231 . -341) (undo-tree-id232 . -341) (undo-tree-id233 . -341) (undo-tree-id234 . -341) (undo-tree-id235 . -341) (undo-tree-id236 . -358) (undo-tree-id237 . -358) (undo-tree-id238 . -358) (undo-tree-id239 . -358) (undo-tree-id240 . -358) (undo-tree-id241 . -358) (undo-tree-id242 . -358) (undo-tree-id243 . -382) (undo-tree-id244 . -382) (undo-tree-id245 . -382) (undo-tree-id246 . -382) (undo-tree-id247 . -382) (undo-tree-id248 . -382) (undo-tree-id249 . -382) (undo-tree-id250 . -383) (undo-tree-id251 . -383) (undo-tree-id252 . -383) (undo-tree-id253 . -383) (undo-tree-id254 . -383) (undo-tree-id255 . -382) (undo-tree-id256 . -382) (undo-tree-id257 . -382) (undo-tree-id258 . -382) (undo-tree-id259 . -382) (undo-tree-id260 . -359) (undo-tree-id261 . -359) (undo-tree-id262 . -359) (undo-tree-id263 . -359) (undo-tree-id264 . -359) (undo-tree-id265 . -359) (undo-tree-id266 . -359) (undo-tree-id267 . -359) (undo-tree-id268 . -359) (undo-tree-id269 . -359) (undo-tree-id270 . -359) (undo-tree-id271 . -359) (undo-tree-id272 . -359) (undo-tree-id273 . -359) (undo-tree-id274 . -359) (undo-tree-id275 . -359) (undo-tree-id276 . -359) (undo-tree-id277 . -359) (undo-tree-id278 . -359) (undo-tree-id279 . -359) (undo-tree-id280 . -382) (undo-tree-id281 . -382) (undo-tree-id282 . -382) (undo-tree-id283 . -382) (undo-tree-id284 . -382) (undo-tree-id285 . -382) (undo-tree-id286 . -382) (undo-tree-id287 . -382) (undo-tree-id288 . -382) (undo-tree-id289 . -382) (undo-tree-id290 . -382) (undo-tree-id291 . -382) (undo-tree-id292 . -382) (undo-tree-id293 . -382) (undo-tree-id294 . -382) (undo-tree-id295 . -382) (undo-tree-id296 . -382) (undo-tree-id297 . -382) (undo-tree-id298 . -382) (undo-tree-id299 . -382) (undo-tree-id300 . -382) (undo-tree-id301 . -382) (undo-tree-id302 . -382) (undo-tree-id303 . -383) 25845 (t 26718 18347 551071 65000)) nil (26718 18409 426773 149000) 0 nil])
nil
