(undo-tree-save-format-version . 1)
"c03de0d75c24eb5c526b58d33d536ecfeabefd95"
[nil nil nil nil (26716 53990 183633 162000) 0 nil]
([nil nil ((256 . 301) 255 (t 26715 40779 231977 573000)) nil (26716 54069 402899 507000) 0 nil] [nil nil ((256 . 1549) 255 (t 26715 40779 231977 573000)) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
 \"Inserts \\\\alink{<clipboard contents>} after the cursor position, then go to end of next line.
If there's a comma at the end of the current line, insert before the comma instead.\"
 (interactive)
 (let ((clipboard-text (or (gui-get-selection 'CLIPBOARD)
                          (gui-get-selection 'PRIMARY)
                          (current-kill 0))))
   (when clipboard-text
     (save-excursion
       (end-of-line)
       (let ((line-end (point))
             (line-start (line-beginning-position)))
         (let ((line-content (buffer-substring-no-properties line-start line-end)))
           (if (string-match \",\\\\s-*$\" line-content)
               ;; There's a comma at the end, insert before it
               (progn
                 (goto-char line-start)
                 (when (re-search-forward \",\\\\s-*$\" line-end t)
                   (goto-char (match-beginning 0))
                   (insert (format \"\\\\alink{%s}\" clipboard-text))))
             ;; No comma at end, insert after cursor
             (progn
               (goto-char (point))  ; Go back to original cursor position
               (forward-char 1)
               (insert (format \"\\\\alink{%s}\" clipboard-text)))))))
     (forward-line 1)
     (end-of-line))))
}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 8 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 8 13 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 13 14 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 14 47 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 47 51 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 51 52 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 52 61 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 61 63 (face font-lock-warning-face src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 63 147 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 147 231 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 231 232 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 232 234 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 234 245 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 245 247 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 247 249 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 249 252 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 252 271 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 271 273 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 273 305 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 305 360 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 360 406 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 406 410 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 410 414 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 414 430 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 430 436 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 436 450 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 450 451 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 451 472 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 472 480 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 480 483 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 483 504 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 504 557 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 557 567 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 567 570 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 570 641 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 641 653 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 653 655 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 655 670 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 670 672 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 672 674 (face font-lock-warning-face src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 674 677 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 677 679 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 679 694 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 694 709 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 709 712 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 712 757 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 757 773 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 773 778 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 778 779 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 779 819 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 819 837 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 837 841 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 841 861 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 861 869 (face tex-math src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 869 870 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 870 883 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 883 934 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 934 969 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 969 970 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 970 972 (face font-lock-warning-face src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 972 978 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 978 982 (face font-lock-comment-face src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 982 1002 (face font-lock-comment-face src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1002 1015 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1015 1018 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1018 1055 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1055 1069 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1069 1074 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1074 1075 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1075 1111 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1111 1113 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1113 1149 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1149 1181 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1181 1212 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1212 1213 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1213 1215 (face font-lock-warning-face src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1215 1221 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1221 1225 (face font-lock-comment-face src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1225 1248 (face font-lock-comment-face src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1248 1270 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1270 1290 (src-block t font-lock-fontified t fontified t yank-handler (evil-yank-line-handler nil t)) 1290 1291 (src-block t font-lock-fontified t rear-nonsticky t fontified t yank-handler (evil-yank-line-handler nil t)) 1291 1292 (fontified t yank-handler (evil-yank-line-handler nil t)) 1292 1293 (fontified t)) . 256)) (26716 53990 183249 190000) 0 nil] [nil nil ((284 . 329) 255 (t 26715 40779 231977 573000)) ((#("\\alink{https://orcid.org/0000-0001-8206-7425}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 284)) (26716 53912 442763 131000) 0 nil] [nil nil ((284 . 329) 255 (t 26715 40779 231977 573000)) ((#("\\alink{https://orcid.org/0000-0001-8206-7425}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 284)) (26716 53908 50571 351000) 0 nil])
([nil nil ((345 . 390)) nil (26716 54164 281489 319000) 0 nil] [nil nil ((346 . 391) 345) ((#("\\alink{https://orcid.org/0000-0002-6795-5384}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 346)) (26716 54069 402807 203000) 0 nil])
nil
nil
nil
([nil nil ((405 . 450)) nil (26716 54164 281489 58000) 0 nil])
nil
([nil nil ((463 . 508)) nil (26716 54164 281488 607000) 0 nil])
([nil nil ((522 . 570) 521) nil (26716 54164 281488 327000) 0 nil])
([nil nil ((nil rear-nonsticky nil 310 . 311) (nil fontified nil 230 . 311) (230 . 311)) nil (26716 54164 281487 826000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 245)) nil (26716 54164 281487 375000) 0 nil])
([nil nil ((#("" 0 1 (fontified t)) . 245)) nil (26716 54164 281486 934000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 245)) nil (26716 54164 281486 443000) 0 nil])
([nil nil ((#("B.N. Zholamanov" 0 15 (fontified t)) . 230) (undo-tree-id46 . -14) (undo-tree-id47 . -14) (undo-tree-id48 . -14)) nil (26716 54164 281486 103000) 0 nil])
([nil nil ((nil rear-nonsticky nil 319 . 320) (nil fontified nil 305 . 320) (305 . 320) (#("Б.Н. Жоламанов" 0 14 (face (bold) fontified t)) . 305) (undo-tree-id42 . -14) (undo-tree-id43 . -13) (undo-tree-id44 . -13) (undo-tree-id45 . -13) 319) nil (26716 54164 281484 610000) 0 nil])
([nil nil ((#("M.K. Nurgaliyev" 0 15 (fontified t)) . 232) (undo-tree-id39 . -14) (undo-tree-id40 . -14) (undo-tree-id41 . -14)) nil (26716 54164 281455 786000) 0 nil])
([nil nil ((nil rear-nonsticky nil 394 . 395) (nil fontified nil 380 . 395) (380 . 395) (#("М.К. Нұрғалиев" 0 14 (face (bold) fontified t)) . 380) (undo-tree-id34 . -14) (undo-tree-id35 . -14) (undo-tree-id36 . -13) (undo-tree-id37 . -13) (undo-tree-id38 . -13) 394) nil (26716 54164 281454 593000) 0 nil])
([nil nil ((#("A.B. Bolatbek" 0 13 (fontified t)) . 235) (undo-tree-id30 . -12) (undo-tree-id31 . -12) (undo-tree-id32 . -12) (undo-tree-id33 . -12) 247) nil (26716 54164 281452 850000) 0 nil])
([nil nil ((nil rear-nonsticky nil 441 . 442) (nil fontified nil 429 . 442) (429 . 442) (#("А.Б. Болатбек" 0 13 (face (bold) fontified t)) . 429) (undo-tree-id24 . -13) (undo-tree-id25 . -13) (undo-tree-id26 . -13) (undo-tree-id27 . -12) (undo-tree-id28 . -12) (undo-tree-id29 . -13)) nil (26716 54164 281450 846000) 0 nil])
([nil nil ((#("K.T. Kopbay" 0 11 (fontified t)) . 238) (undo-tree-id20 . -10) (undo-tree-id21 . -10) (undo-tree-id22 . -10) (undo-tree-id23 . -10) 248) nil (26716 54164 281371 738000) 0 nil])
([nil nil ((nil rear-nonsticky nil 488 . 489) (nil fontified nil 478 . 489) (478 . 489) (#("Қ.Т. Көпбай" 0 11 (fontified t)) . 478) (undo-tree-id17 . -11) (undo-tree-id18 . -10) (undo-tree-id19 . -10)) nil (26716 54164 281370 295000) 0 nil])
([nil nil ((#("D.A. Kozhabek" 0 12 (fontified t) 12 13 (fontified t rear-nonsticky t)) . 241) (undo-tree-id14 . -12) (undo-tree-id15 . -12) (undo-tree-id16 . -12)) nil (26716 54164 281368 542000) 0 nil])
([nil nil ((nil rear-nonsticky nil 535 . 536) (nil fontified nil 523 . 536) (523 . 536) (#("Д.А. Қожабек" 0 12 (fontified t)) . 523) (undo-tree-id10 . -12) (undo-tree-id11 . -11) (undo-tree-id12 . -11) (undo-tree-id13 . -11) 535) nil (26716 54164 281367 319000) 0 nil])
([nil nil ((#(",  ,  ,  ,
" 0 11 (fontified t)) . 230) (undo-tree-id6 . -10) (undo-tree-id7 . -11) (undo-tree-id8 . -11) (undo-tree-id9 . -9) 239) nil (26716 54164 281365 827000) 0 nil])
([nil nil ((#("%" 0 1 (face (font-lock-comment-face bold) fontified t foreign-selection nil)) . 550) (undo-tree-id4 . -1) (undo-tree-id5 . -1)) nil (26716 54164 281363 713000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t foreign-selection nil)) . 550) (undo-tree-id2 . -1) (undo-tree-id3 . -1)) nil (26716 54450 487422 750000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t foreign-selection nil)) . 550)) ((550 . 551)) (26716 54451 980541 282000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -11519) (undo-tree-id554 . -1) (undo-tree-id555 . -1) 11520 (t 26716 54454 282992 366000)) nil (26716 54471 122376 524000) 0 nil] [nil nil ((#("4" 0 1 (fontified t)) . -11519) (undo-tree-id49 . -1) 11520 (t 26716 54164 282925 141000)) ((11519 . 11520)) (26716 54449 580879 612000) 0 nil])
([nil nil ((11519 . 11521)) nil (26716 54471 122362 558000) 0 nil])
([nil nil ((11519 . 11521)) ((#("35" 0 1 (fontified t) 1 2 (fontified t)) . 11519)) (26716 54449 262399 92000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 25104) (undo-tree-id573 . -1) (t 26716 54471 124054 422000)) nil (26716 54501 328258 589000) 0 nil])
([nil nil ((11531 . 11533) (t 26716 54239 683202 255000)) ((#(", " 0 1 (fontified t) 1 2 (fontified t)) . 11531) (undo-tree-id438 . -2) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -2) (undo-tree-id536 . -2) (undo-tree-id537 . -2) (undo-tree-id538 . -2) (undo-tree-id539 . -2) (undo-tree-id540 . -2) (undo-tree-id541 . -2) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . -1) (undo-tree-id552 . -2) (undo-tree-id553 . -2)) (26716 54448 875687 629000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 24978) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1)) nil (26716 54505 324219 440000) 0 nil] [nil nil ((#("5" 0 1 (fontified t)) . 24978) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1)) ((24978 . 24979)) (26716 54501 328152 279000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11532) (undo-tree-id56 . -1) 11533) ((11532 . 11533)) (26716 54448 523579 218000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 25160) (undo-tree-id574 . -1) (undo-tree-id575 . -1)) nil (26716 54505 324209 491000) 0 nil])
nil
([nil nil ((11532 . 11553)) ((#("height=\\columnwidthhh" 0 7 (fontified t) 7 19 (face font-lock-keyword-face fontified t) 19 20 (face font-lock-keyword-face fontified t) 20 21 (face font-lock-keyword-face fontified t)) . 11532) (undo-tree-id357 . -21) (undo-tree-id358 . -7) (undo-tree-id359 . 14) (undo-tree-id360 . -7) (undo-tree-id361 . -7) (undo-tree-id362 . -7) (undo-tree-id363 . -7) (undo-tree-id364 . -7) (undo-tree-id365 . -7) (undo-tree-id366 . -7) (undo-tree-id367 . -7) (undo-tree-id368 . -7) (undo-tree-id369 . -7) (undo-tree-id370 . -7) (undo-tree-id371 . -7) (undo-tree-id372 . -7) (undo-tree-id373 . -7) (undo-tree-id374 . -7) (undo-tree-id375 . -7) (undo-tree-id376 . -7) (undo-tree-id377 . -7) (undo-tree-id378 . -7) (undo-tree-id379 . -7) (undo-tree-id380 . -7) (undo-tree-id381 . -7) (undo-tree-id382 . -7) (undo-tree-id383 . -7) (undo-tree-id384 . -7) (undo-tree-id385 . -7) (undo-tree-id386 . -7) (undo-tree-id387 . -7) (undo-tree-id388 . -7) (undo-tree-id389 . -7) (undo-tree-id390 . -7) (undo-tree-id391 . -7) (undo-tree-id392 . -7) (undo-tree-id393 . -7) (undo-tree-id394 . -7) (undo-tree-id395 . -7) (undo-tree-id396 . -7) (undo-tree-id397 . -7) (undo-tree-id398 . -7) (undo-tree-id399 . -7) (undo-tree-id400 . -7) (undo-tree-id401 . -7) (undo-tree-id402 . -7) (undo-tree-id403 . -7) (undo-tree-id404 . -7) (undo-tree-id405 . -7) (undo-tree-id406 . -7) (undo-tree-id407 . -7) (undo-tree-id408 . -7) (undo-tree-id409 . -7) (undo-tree-id410 . -7) (undo-tree-id411 . -7) (undo-tree-id412 . -7) (undo-tree-id413 . -7) (undo-tree-id414 . -7) (undo-tree-id415 . -7) (undo-tree-id416 . -7) (undo-tree-id417 . -7) (undo-tree-id418 . -7) (undo-tree-id419 . -7) (undo-tree-id420 . -21) (undo-tree-id421 . -21) (undo-tree-id422 . -21) (undo-tree-id423 . -21) (undo-tree-id424 . -21) (undo-tree-id425 . -21) (undo-tree-id426 . -21) (undo-tree-id427 . -21) (undo-tree-id428 . -21) (undo-tree-id429 . -21) (undo-tree-id430 . -21) (undo-tree-id431 . -21) (undo-tree-id432 . -21) (undo-tree-id433 . -21) (undo-tree-id434 . -21) (undo-tree-id435 . -21) (undo-tree-id436 . -21) (undo-tree-id437 . -21)) (26716 54448 301850 991000) 0 nil])
([nil nil ((#("{}" 0 2 (fontified t)) . -30) (t 26717 10309 623956 291000) (32 . 76) 1 (t 26717 10309 623956 291000)) nil (26718 30037 434332 44000) 0 nil])
([nil nil ((#("h" 0 1 (face font-lock-keyword-face fontified t)) . -11551) (undo-tree-id54 . -1) (#("h" 0 1 (face font-lock-keyword-face fontified t)) . -11552) (undo-tree-id55 . -1) 11553) ((11551 . 11553)) (26716 54448 98970 291000) 0 nil])
([nil nil ((17314 . 17315) (t 26718 30037 436380 790000) 17245) nil (26718 33790 591129 10000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-keyword-face fontified t)) . -11522) (undo-tree-id50 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -11523) (undo-tree-id51 . -1) (#("x" 0 1 (face font-lock-keyword-face fontified t)) . -11524) (undo-tree-id52 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -11525) (undo-tree-id53 . -1) 11526) ((11522 . 11526)) (26716 54447 901437 824000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 17137) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (t 26718 33790 592393 212000)) nil (26718 33793 571847 654000) 0 nil])
([nil nil ((11522 . 11528)) ((#("column" 0 6 (face font-lock-keyword-face fontified t)) . 11522)) (26716 54447 683225 996000) 0 nil])
([nil nil ((23575 . 23576) (#("   " 0 3 (fontified nil)) . 23575) (#("
" 0 1 (fontified t)) . -23575) (23504 . 23505) (#("   " 0 3 (fontified nil)) . 23504) (#("
" 0 1 (fontified t)) . -23504) (23433 . 23434) (#("   " 0 3 (fontified nil)) . 23433) (#("
" 0 1 (fontified t)) . -23433) 23353 (t 26718 33793 573374 157000)) nil (26718 33835 567042 611000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 11517)) ((11517 . 11518)) (26716 54447 480005 798000) 0 nil])
([nil nil ((#("       \\caption*{Fig.6 - The dependence of received signal power on distance for three different antennas: monopole antenna, patch antenna, and antenna array, with the same transmission power level of 18 dBm at a frequency of 2.4 GHz}
" 0 7 (fontified t) 7 16 (face font-lock-keyword-face fontified t) 16 80 (fontified t) 80 81 (fontified t) 81 151 (fontified t) 151 152 (fontified t) 152 222 (fontified t) 222 223 (fontified t) 223 235 (fontified t)) . 23353) (undo-tree-id7 . -234) (undo-tree-id8 . -222) 23575) nil (26718 33835 567041 339000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 11517)) ((11517 . 11518)) (26716 54447 169752 922000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23378 . 23379) (#("
" 0 1 (fontified nil)) . -23606) (23371 . 23607) 23370) nil (26718 33835 566863 376000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . 11517)) ((11517 . 11518)) (26716 54446 777075 496000) 0 nil])
([nil nil ((#("       " 0 6 (fontified nil) 6 7 (rear-nonsticky t fontified nil)) . -23376) (undo-tree-id6 . -7) (23372 . 23376) 23379) nil (26718 33835 566859 850000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 11517)) ((11517 . 11518)) (26716 54446 156306 697000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 23375) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (t 26718 33835 570105 733000)) nil (26718 33836 841535 442000) 0 nil])
([nil nil ((11537 . 11540) (t 26716 54273 529326 751000)) ((#("1.5" 0 2 (fontified t) 2 3 (fontified t)) . 11537) (undo-tree-id325 . -2) (undo-tree-id326 . -3) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2)) (26716 54445 638208 51000) 0 nil])
([nil nil ((#("
Figure 7 and 8 illustrates the variation in RSSI values as a function of
both distance and angular position. The graph provides a clear
visualization of how the RSSI by the antenna array changes under
different experimental conditions.
" 0 65 (fontified t) 65 74 (fontified t) 74 237 (fontified t)) . 24696) (undo-tree-id61 . -202) (undo-tree-id62 . -236) (undo-tree-id63 . -202) (undo-tree-id64 . -202) 24898 (t 26718 33836 844097 588000)) nil (26718 33894 153761 831000) 0 nil])
([nil nil ((11539 . 11540) (#("5" 0 1 (fontified t)) . 11539) (undo-tree-id57 . -1) (t 26716 54283 590363 769000)) ((11539 . 11540) (#("3" 0 1 (fontified t)) . 11539)) (26716 54444 943809 87000) 0 nil])
([nil nil ((25102 . 25103) 25082) nil (26718 33894 153759 477000) 0 nil])
([nil nil ((#("
{\\bfseries Materials and methods.}

\\emph{{\\bfseries 2.1 Experimental setup}}

The experiment was conducted in an open field without any obstacles to
minimize the impact of radio wave interference, which occurs due to the
superposition of multiple waves. Figure 1 shows the experimental area,
demonstrating a flat, unobstructed area free from unwanted factors.
" 0 2 (fontified t) 2 11 (face font-lock-keyword-face fontified t) 11 34 (face (bold) fontified t) 34 37 (fontified t) 37 42 (face font-lock-keyword-face fontified t) 42 43 (fontified t) 43 44 (face (italic) fontified t) 44 53 (face (font-lock-keyword-face italic) fontified t) 53 76 (face (italic bold) fontified t) 76 77 (face (italic) fontified t) 77 223 (fontified t) 223 259 (fontified t) 259 362 (fontified t)) . 11100) (undo-tree-id59 . -294) (undo-tree-id60 . -361) (undo-tree-id61 . -294) (undo-tree-id63 . -362) (undo-tree-id65 . -362) (undo-tree-id67 . -343) (undo-tree-id69 . -343) (undo-tree-id71 . -343) (undo-tree-id73 . -272) (undo-tree-id75 . -272) (undo-tree-id77 . -200) (undo-tree-id79 . -200) (undo-tree-id81 . -200) (undo-tree-id83 . -129) (undo-tree-id85 . -129) (undo-tree-id87 . -79) (undo-tree-id89 . -79) (undo-tree-id91 . -79) (undo-tree-id93 . -77) (undo-tree-id95 . -77) (undo-tree-id97 . -36) (undo-tree-id99 . -36) (undo-tree-id101 . -36) (undo-tree-id103 . -34) (undo-tree-id105 . -34) (undo-tree-id107 . -1) (undo-tree-id109 . -1) (undo-tree-id111 . -1) (undo-tree-id113 . -1) (undo-tree-id115 . -1) (undo-tree-id117 . -1) (undo-tree-id119 . -1) (undo-tree-id121 . -1) (undo-tree-id123 . -1) (undo-tree-id125 . -36) (undo-tree-id127 . -36) (undo-tree-id129 . -37) (undo-tree-id131 . -37) (undo-tree-id133 . -37) (undo-tree-id135 . -79) (undo-tree-id137 . -79) (undo-tree-id139 . -80) (undo-tree-id141 . -80) (undo-tree-id143 . -80) (undo-tree-id145 . -151) (undo-tree-id147 . -151) (undo-tree-id149 . -223) (undo-tree-id151 . -223) (undo-tree-id153 . -223) (undo-tree-id155 . -294) (undo-tree-id157 . -294) (undo-tree-id159 . -294) (undo-tree-id161 . -294) (undo-tree-id163 . -294) (undo-tree-id165 . -294) (undo-tree-id167 . -294) (undo-tree-id169 . -294) (undo-tree-id171 . -294) (undo-tree-id173 . -294) (undo-tree-id175 . -294) (undo-tree-id177 . -294) (undo-tree-id178 . -294) (undo-tree-id180 . -294) (undo-tree-id182 . -362) 11394 (t 26716 54295 88406 81000)) ((11100 . 11462)) (26716 54444 4618 122000) 0 nil])
([nil nil ((25102 . 25103) 25082) nil (26718 33894 153759 186000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11323 . 11324) (#("
" 0 1 (fontified nil)) . -11685) (11323 . 11686) 11311) ((#("

{\\bfseries Materials and methods.}

\\emph{{\\bfseries 2.1 Experimental setup}}

The experiment was conducted in an open field without any obstacles to
minimize the impact of radio wave interference, which occurs due to the
superposition of multiple waves. Figure 1 shows the experimental area,
demonstrating a flat, unobstructed area free from unwanted factors.
" 0 1 (fontified nil rear-nonsticky nil) 1 2 (fontified nil) 2 3 (fontified t) 3 12 (face font-lock-keyword-face fontified t) 12 35 (face (bold) fontified t) 35 38 (fontified t) 38 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 45 (face (italic) fontified t) 45 54 (face (font-lock-keyword-face italic) fontified t) 54 77 (face (italic bold) fontified t) 77 78 (face (italic) fontified t) 78 224 (fontified t) 224 260 (fontified t) 260 295 (fontified t) 295 362 (fontified nil) 362 363 (fontified nil)) . 11323) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -37) (undo-tree-id324 . -37) (11685 . 11686) (nil rear-nonsticky t 11323 . 11324)) (26716 54443 502889 769000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25103 . 25104) (#("
" 0 1 (fontified nil)) . -25340) (25103 . 25341)) nil (26718 33894 153758 635000) 0 nil])
([nil nil ((#("
- \\emph{Ground Plane:} The ground plane is positioned on the opposite
side of the substrate. It directs the radiated signal, ensuring it
propagates in a specific direction. A coaxial feed line is used to
provide power to the patch via the ground plane.
To ensure compatibility with the XBee module operating under the ZigBee
protocol, which spans a wide frequency range with 16 channels spaced 5
MHz apart, the antenna includes an air gap to enhance performance. This
design ensures optimal impedance matching and effective radiation across
the required frequency bands.
" 0 3 (fontified t) 3 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 22 (face (italic) fontified t) 22 572 (fontified t)) . 16203) (undo-tree-id183 . -542) (undo-tree-id184 . -571) (undo-tree-id185 . -542) (undo-tree-id186 . -542) (undo-tree-id187 . -542) (undo-tree-id188 . -542) (undo-tree-id189 . -542) (undo-tree-id190 . -542) (undo-tree-id191 . -542) (undo-tree-id192 . -542) (undo-tree-id193 . -542) (undo-tree-id194 . -542) (undo-tree-id195 . -542) (undo-tree-id196 . -542) (undo-tree-id197 . -542) (undo-tree-id198 . -542) (undo-tree-id199 . -542) (undo-tree-id200 . -542) (undo-tree-id201 . -542) (undo-tree-id202 . -542) (undo-tree-id203 . -542) (undo-tree-id204 . -572) 16745 (t 26716 54314 162476 286000)) ((16203 . 16775)) (26716 54443 78856 478000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 25104) (undo-tree-id60 . -1)) nil (26718 33894 153757 794000) 0 nil])
([nil nil ((nil rear-nonsticky nil 16368 . 16369) (#("
" 0 1 (fontified nil)) . -16940) (16368 . 16941) 16356) ((#("

- \\emph{Ground Plane:} The ground plane is positioned on the opposite
side of the substrate. It directs the radiated signal, ensuring it
propagates in a specific direction. A coaxial feed line is used to
provide power to the patch via the ground plane.
To ensure compatibility with the XBee module operating under the ZigBee
protocol, which spans a wide frequency range with 16 channels spaced 5
MHz apart, the antenna includes an air gap to enhance performance. This
design ensures optimal impedance matching and effective radiation across
the required frequency bands.
" 0 1 (fontified nil rear-nonsticky nil) 1 2 (fontified nil) 2 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 23 (face (italic) fontified t) 23 543 (fontified t) 543 572 (fontified nil) 572 573 (fontified nil)) . 16368) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -572) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (16940 . 16941) (nil rear-nonsticky t 16368 . 16369) (t 26716 54361 201649 484000)) (26716 54361 199721 113000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 25103) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1)) nil (26718 33894 153753 626000) 0 nil])
nil
([nil nil ((31209 . 31221) (#("{" 0 1 (face font-lock-keyword-face fontified t)) . -31209) (undo-tree-id65 . -1) (#("-" 0 1 (fontified t)) . -31210) (undo-tree-id66 . -1) 31211 (31208 . 31211) (t 26718 33894 155731 272000)) nil (26718 33929 52321 681000) 0 nil])
([nil nil ((33040 . 33041) (#(":" 0 1 (fontified t)) . 33040) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (t 26718 33929 54508 206000)) nil (26718 33987 630612 919000) 0 nil])
([nil nil ((nil rear-nonsticky nil 33869 . 33870) (nil fontified nil 33614 . 33870) (33614 . 33870) (#("11. Wang, Z., Liu, M., \\& Zhang, Y. (2019, October). Mobile localization
in complex indoor environment based on ZigBee wireless network. In
Journal of Physics: Conference Series (Vol.1314, No.1, p.012214). IOP
Publishing. DOI 10.1088/1742-6596/1314/1/012214" 0 23 (fontified t) 23 25 (face font-lock-keyword-face fontified t) 25 257 (fontified t)) . 33614) (undo-tree-id107 . -256) (undo-tree-id108 . -3) (undo-tree-id109 . -213) (undo-tree-id110 . -213) 33872 (t 26718 33987 633133 854000)) nil (26718 34050 500733 980000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -33810) (33809 . 33810) (#(" " 0 1 (fontified nil)) . -33750) (33749 . 33750) (#(" " 0 1 (fontified nil)) . -33685) (33684 . 33685) 33869) nil (26718 34050 500721 476000) 0 nil])
([nil nil ((33636 . 33637) (t 26718 34050 502732 68000)) nil (26718 34055 831563 996000) 0 nil])
([nil nil ((34972 . 34974) (t 26718 34055 833697 993000)) nil (26718 34127 706934 250000) 0 nil])
([nil nil ((35403 . 35415) (34703 . 34715) 35571 (t 26718 34127 709238 540000)) nil (26718 37197 243862 781000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-warning-face fontified t)) . 32626) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (t 26718 37197 245620 398000)) nil (26719 49583 80998 861000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-keyword-face fontified t)) . 32626) (undo-tree-id0 . -1) (undo-tree-id1 . -1)) nil (26719 49604 22752 476000) 0 nil])
([nil current ((32626 . 32628) (t 26719 49583 83267 142000)) nil (26719 49605 808668 842000) 0 nil] [nil nil ((#("1" 0 1 (fontified t)) . 32626) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (t 26719 49583 83267 142000)) ((32626 . 32627)) (26719 49604 22507 979000) 0 nil])
nil
nil
