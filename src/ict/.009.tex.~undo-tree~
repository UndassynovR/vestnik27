(undo-tree-save-format-version . 1)
"fb06de366693f0e45e078762bc212007af51c836"
[nil nil nil nil (26712 15028 902967 110000) 0 nil]
([nil nil ((95 . 96) (#("
" 0 1 (face (bold) fontified t)) . -95) 24 (t 26711 44856 928855 708000)) nil (26712 15028 902966 489000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-keyword-face fontified t)) . 25)) nil (26712 15028 902965 607000) 0 nil])
([nil nil (25) nil (26712 15028 902965 377000) 0 nil])
([nil nil ((43 . 45) (25 . 43) (#("sectionw" 0 8 (face font-lock-keyword-face fontified t)) . -25) (undo-tree-id14 . -8) (undo-tree-id15 . -8) (undo-tree-id16 . -8) 33 (29 . 33) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -29) (undo-tree-id17 . -1) (24 . 30)) nil (26712 15028 902964 766000) 0 nil])
([nil nil ((#("bfseries " 0 8 (fontified t) 8 9 (fontified t)) . 46) (undo-tree-id13 . -8)) nil (26712 15028 902963 173000) 0 nil])
([nil nil ((#("{\\bfseries \\textsuperscript{1}А.Даулеткалиева}
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict2/image1}
	\\caption*{}
\\end{figure}
{\\bfseries \\textsuperscript{\\envelope },
\\textsuperscript{1}А.Муканова}
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict2/image1}
	\\caption*{}
\\end{figure}
{\\bfseries ,
\\textsuperscript{1}А.Назырова}
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict2/image1}
	\\caption*{}
\\end{figure}
{\\bfseries ,
\\textsuperscript{2}Б.Ергеш}
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict2/image1}
	\\caption*{}
\\end{figure}
,

{\\bfseries \\textsuperscript{2}Л.Жеткенбай}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict2/image1}
	\\caption*{}
\\end{figure}
{\\bfseries ,\\textsuperscript{1}А.Бурибаева}
\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict2/image1}
	\\caption*{}
\\end{figure}
" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (face (bold) fontified t) 11 27 (face (font-lock-keyword-face bold) fontified t) 27 45 (face (bold) fontified t) 45 47 (fontified t) 47 53 (face font-lock-keyword-face fontified t) 53 54 (fontified t latex-env-pair t) 54 60 (face font-lock-function-name-face fontified t latex-env-pair t) 60 61 (fontified t latex-env-pair t) 61 66 (fontified t) 66 76 (face font-lock-keyword-face fontified t) 76 78 (fontified t) 78 94 (face font-lock-keyword-face fontified t) 94 104 (fontified t) 104 114 (face font-lock-keyword-face fontified t) 114 116 (fontified t) 116 133 (face font-lock-builtin-face fontified t) 133 136 (fontified t) 136 145 (face font-lock-keyword-face fontified t) 145 148 (fontified t) 148 152 (face font-lock-keyword-face fontified t) 152 153 (fontified t latex-env-pair t) 153 159 (face font-lock-function-name-face fontified t latex-env-pair t) 159 160 (fontified t latex-env-pair t) 160 162 (fontified t) 162 171 (face font-lock-keyword-face fontified t) 171 172 (face (bold) fontified t) 172 188 (face (font-lock-keyword-face bold) fontified t) 188 189 (face (bold) fontified t) 189 198 (face (font-lock-keyword-face bold) fontified t) 198 202 (face (bold) fontified t) 202 218 (face (font-lock-keyword-face bold) fontified t) 218 231 (face (bold) fontified t) 231 233 (fontified t) 233 239 (face font-lock-keyword-face fontified t) 239 240 (fontified t latex-env-pair t) 240 246 (face font-lock-function-name-face fontified t latex-env-pair t) 246 247 (fontified t latex-env-pair t) 247 252 (fontified t) 252 262 (face font-lock-keyword-face fontified t) 262 264 (fontified t) 264 280 (face font-lock-keyword-face fontified t) 280 290 (fontified t) 290 300 (face font-lock-keyword-face fontified t) 300 302 (fontified t) 302 319 (face font-lock-builtin-face fontified t) 319 322 (fontified t) 322 331 (face font-lock-keyword-face fontified t) 331 334 (fontified t) 334 338 (face font-lock-keyword-face fontified t) 338 339 (fontified t latex-env-pair t) 339 345 (face font-lock-function-name-face fontified t latex-env-pair t) 345 346 (fontified t latex-env-pair t) 346 348 (fontified t) 348 357 (face font-lock-keyword-face fontified t) 357 360 (face (bold) fontified t) 360 376 (face (font-lock-keyword-face bold) fontified t) 376 389 (face (bold) fontified t) 389 391 (fontified t) 391 397 (face font-lock-keyword-face fontified t) 397 398 (fontified t latex-env-pair t) 398 404 (face font-lock-function-name-face fontified t latex-env-pair t) 404 405 (fontified t latex-env-pair t) 405 410 (fontified t) 410 420 (face font-lock-keyword-face fontified t) 420 422 (fontified t) 422 438 (face font-lock-keyword-face fontified t) 438 448 (fontified t) 448 458 (face font-lock-keyword-face fontified t) 458 460 (fontified t) 460 477 (face font-lock-builtin-face fontified t) 477 480 (fontified t) 480 489 (face font-lock-keyword-face fontified t) 489 492 (fontified t) 492 496 (face font-lock-keyword-face fontified t) 496 497 (fontified t latex-env-pair t) 497 503 (face font-lock-function-name-face fontified t latex-env-pair t) 503 504 (fontified t latex-env-pair t) 504 506 (fontified t) 506 515 (face font-lock-keyword-face fontified t) 515 518 (face (bold) fontified t) 518 534 (face (font-lock-keyword-face bold) fontified t) 534 544 (face (bold) fontified t) 544 546 (fontified t) 546 552 (face font-lock-keyword-face fontified t) 552 553 (fontified t latex-env-pair t) 553 559 (face font-lock-function-name-face fontified t latex-env-pair t) 559 560 (fontified t latex-env-pair t) 560 565 (fontified t) 565 575 (face font-lock-keyword-face fontified t) 575 577 (fontified t) 577 593 (face font-lock-keyword-face fontified t) 593 603 (fontified t) 603 613 (face font-lock-keyword-face fontified t) 613 615 (fontified t) 615 632 (face font-lock-builtin-face fontified t) 632 635 (fontified t) 635 644 (face font-lock-keyword-face fontified t) 644 647 (fontified t) 647 651 (face font-lock-keyword-face fontified t) 651 652 (fontified t latex-env-pair t) 652 658 (face font-lock-function-name-face fontified t latex-env-pair t) 658 659 (fontified t latex-env-pair t) 659 664 (fontified t) 664 673 (face font-lock-keyword-face fontified t) 673 674 (face (bold) fontified t) 674 690 (face (font-lock-keyword-face bold) fontified t) 690 704 (face (bold) fontified t) 704 707 (fontified t) 707 713 (face font-lock-keyword-face fontified t) 713 714 (fontified t latex-env-pair t) 714 720 (face font-lock-function-name-face fontified t latex-env-pair t) 720 721 (fontified t latex-env-pair t) 721 726 (fontified t) 726 736 (face font-lock-keyword-face fontified t) 736 738 (fontified t) 738 754 (face font-lock-keyword-face fontified t) 754 764 (fontified t) 764 774 (face font-lock-keyword-face fontified t) 774 776 (fontified t) 776 793 (face font-lock-builtin-face fontified t) 793 796 (fontified t) 796 805 (face font-lock-keyword-face fontified t) 805 808 (fontified t) 808 812 (face font-lock-keyword-face fontified t) 812 813 (fontified t latex-env-pair t) 813 819 (face font-lock-function-name-face fontified t latex-env-pair t) 819 820 (fontified t latex-env-pair t) 820 822 (fontified t) 822 831 (face font-lock-keyword-face fontified t) 831 833 (face (bold) fontified t) 833 849 (face (font-lock-keyword-face bold) fontified t) 849 863 (face (bold) fontified t) 863 865 (fontified t) 865 871 (face font-lock-keyword-face fontified t) 871 872 (fontified t latex-env-pair t) 872 878 (face font-lock-function-name-face fontified t latex-env-pair t) 878 879 (fontified t latex-env-pair t) 879 884 (fontified t) 884 894 (face font-lock-keyword-face fontified t) 894 896 (fontified t) 896 912 (face font-lock-keyword-face fontified t) 912 922 (fontified t) 922 932 (face font-lock-keyword-face fontified t) 932 934 (fontified t) 934 951 (face font-lock-builtin-face fontified t) 951 954 (fontified t) 954 963 (face font-lock-keyword-face fontified t) 963 966 (fontified t) 966 970 (face font-lock-keyword-face fontified t) 970 971 (fontified t latex-env-pair t) 971 977 (face font-lock-function-name-face fontified t latex-env-pair t) 977 978 (fontified t latex-env-pair t) 978 979 (fontified t)) . 126) (undo-tree-id4 . -978) (undo-tree-id5 . -966) (undo-tree-id6 . -22) (undo-tree-id7 . -966) (undo-tree-id8 . -22) (undo-tree-id9 . -47) (undo-tree-id10 . -148) (undo-tree-id11 . -202) (undo-tree-id12 . -966) 1092) nil (26712 15028 902962 501000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 126) (undo-tree-id3 . 1)) nil (26712 15028 902940 661000) 0 nil])
([nil nil ((266 . 267) (#("
" 0 1 (face font-lock-string-face fontified t)) . -266) 200) nil (26712 15028 902939 929000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 219)) nil (26712 15028 902939 558000) 0 nil])
([nil nil ((#("{\\bfseries " 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 11 (face (bold) fontified t)) . 296) (undo-tree-id2 . -10)) nil (26712 15028 902939 248000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 323)) nil (26712 15028 902938 476000) 0 nil])
([nil nil ((304 . 309) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . -304) (undo-tree-id0 . -1) (303 . 305) (297 . 303) (#("\\" 0 1 (face font-lock-warning-face fontified t)) . -297) (undo-tree-id1 . -1) 298 (296 . 298)) nil (26712 15028 902938 6000) 0 nil])
([nil nil ((127 . 147) (449 . 467) 127) nil (26712 15028 902916 525000) 0 nil])
([nil nil ((35769 . 35770) 1704) nil (26712 15028 902913 550000) 0 nil])
([nil nil ((1697 . 1698) (#("
" 0 1 (face (bold) fontified t)) . -1697) 1633 (t 26712 15028 905994 549000)) nil (26712 15047 809496 805000) 0 nil])
([nil nil ((1627 . 1649) (1943 . 1963)) nil (26712 15047 809496 354000) 0 nil])
([nil nil ((1739 . 1740) (#(" " 0 1 (face (bold) fontified t)) . 1739)) nil (26712 15047 809496 13000) 0 nil])
([nil nil ((1836 . 1837) (#(" " 0 1 (face (bold) fontified t)) . 1836)) nil (26712 15047 809495 642000) 0 nil])
([nil nil ((1897 . 1898) (#(" " 0 1 (face (bold) fontified t)) . 1897)) nil (26712 15047 809494 781000) 0 nil])
([nil nil ((1963 . 1964)) nil (26712 15047 809494 120000) 0 nil])
([nil nil ((1953 . 1954)) nil (26712 15047 809493 579000) 0 nil])
([nil nil ((1889 . 1890)) nil (26712 15047 809493 48000) 0 nil])
([nil nil ((1858 . 1859)) nil (26712 15047 809492 436000) 0 nil])
([nil nil ((1827 . 1828)) nil (26712 15047 809488 689000) 0 nil])
([nil nil ((2134 . 2135) (#("
" 0 1 (fontified t)) . -2134) 2085 (t 26712 15047 811896 150000)) nil (26712 15054 530649 654000) 0 nil])
([nil nil ((2155 . 2156) (#("
" 0 1 (fontified t)) . -2155) 2154) nil (26712 15054 530648 632000) 0 nil])
([nil nil ((1991 . 2011) (2247 . 2265) 1991) nil (26712 15054 530645 285000) 0 nil])
([nil nil ((3523 . 3524) (#("
" 0 1 (face (bold) fontified t)) . -3523) 3455 (t 26712 15054 532861 154000)) nil (26712 15073 706456 880000) 0 nil])
([nil nil ((3551 . 3552) (#(" " 0 1 (face (bold) fontified t)) . 3551)) nil (26712 15073 706455 948000) 0 nil])
([nil nil ((3646 . 3647) (#(" " 0 1 (fontified t)) . 3646)) nil (26712 15073 706455 407000) 0 nil])
([nil nil ((3705 . 3706) (#(" " 0 1 (fontified t)) . 3705)) nil (26712 15073 706455 27000) 0 nil])
([nil nil ((3768 . 3769)) nil (26712 15073 706454 556000) 0 nil])
([nil nil ((3455 . 3477) (3771 . 3791) 3455) nil (26712 15073 706454 265000) 0 nil])
([nil nil ((3954 . 3955) (#("
" 0 1 (fontified t)) . -3954) 3886) nil (26712 15073 706453 764000) 0 nil])
([nil nil ((3982 . 3983) (#("
" 0 1 (fontified t)) . -3982) 3981) nil (26712 15073 706452 642000) 0 nil])
([nil nil ((3814 . 3834) (4074 . 4092) 3814) nil (26712 15073 706448 94000) 0 nil])
([nil nil ((5188 . 5209) (13620 . 13636) (t 26712 15073 708761 262000)) nil (26712 15091 289764 622000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13657)) nil (26712 15091 289764 171000) 0 nil])
([nil nil ((#("{\\bfseries Рис.1- Архитектура информационной системы извлечения данных}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 70 (face (bold) fontified t) 70 71 (fontified t)) . -13776) 13848) nil (26712 15091 289763 470000) 0 nil])
([nil nil ((nil rear-nonsticky nil 13817 . 13818) (nil fontified nil 13759 . 13818) (13759 . 13818)) nil (26712 15091 289762 839000) 0 nil])
([nil nil ((13764 . 13765)) nil (26712 15091 289761 596000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13834) (undo-tree-id27 . -1)) nil (26712 15091 289760 825000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13834) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1)) nil (26712 15091 289759 262000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13834) (undo-tree-id18 . -1)) nil (26712 15091 289637 93000) 0 nil])
([nil nil ((13835 . 13856) (16784 . 16800) (t 26712 15091 291669 610000)) nil (26712 15151 125013 876000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 16821)) nil (26712 15151 125013 114000) 0 nil])
([nil nil ((#("{\\bfseries Рис.2- Анализ страницы wikipedia.org}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 47 (face (bold) fontified t) 47 48 (fontified t)) . -16940) 16989) nil (26712 15151 125012 654000) 0 nil])
([nil nil ((nil rear-nonsticky nil 16958 . 16959) (nil fontified nil 16923 . 16959) (16923 . 16959)) nil (26712 15151 125012 193000) 0 nil])
([nil nil ((16928 . 16929)) nil (26712 15151 125011 602000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 16975) (undo-tree-id189 . -1)) nil (26712 15151 125011 231000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 16975) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1)) nil (26712 15151 125010 630000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 16975)) nil (26712 15151 125007 985000) 0 nil])
([nil nil ((16976 . 16997) (18606 . 18622)) nil (26712 15151 125007 714000) 0 nil])
([nil nil ((#("\\end{multicols}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (latex-env-pair t fontified t) 5 14 (face font-lock-function-name-face latex-env-pair t fontified t) 14 15 (latex-env-pair t fontified t) 15 16 (fontified t)) . 18627) (undo-tree-id180 . -15) (undo-tree-id181 . 16)) nil (26712 15151 125007 153000) 0 nil])
([nil nil ((nil rear-nonsticky nil 18662 . 18663) (#("
" 0 1 (fontified nil)) . -18678) (18662 . 18679) 18627) nil (26712 15151 125006 382000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 18679)) nil (26712 15151 125006 61000) 0 nil])
([nil nil ((18870 . 18871) (#("
" 0 1 (face (bold) fontified t)) . -18870) 18798) nil (26712 15151 125005 250000) 0 nil])
([nil nil ((#("{\\bfseries Рис.3 - Запрос ChatGPT для извлечения данных с веб-страницы в списки на Python}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 72 (face (bold) fontified t) 72 73 (face (bold) fontified t) 73 89 (face (bold) fontified t) 89 90 (fontified t)) . -18798) (undo-tree-id176 . -71) (undo-tree-id177 . -72) (undo-tree-id178 . -72) (undo-tree-id179 . -72) 18889) nil (26712 15151 125004 779000) 0 nil])
([nil nil ((nil rear-nonsticky nil 18858 . 18859) (nil fontified nil 18781 . 18859) (18781 . 18859)) nil (26712 15151 125003 496000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 18874) (undo-tree-id175 . -1)) nil (26712 15151 125003 56000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 18874) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1)) nil (26712 15151 125002 384000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 18874)) nil (26712 15151 125000 270000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 19609)) nil (26712 15151 124999 749000) 0 nil])
([nil nil ((19898 . 19899) 19864) nil (26712 15151 124999 499000) 0 nil])
([nil nil ((18875 . 18896) (22063 . 22079)) nil (26712 15151 124999 208000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 21817)) nil (26712 15151 124998 958000) 0 nil])
([nil nil ((#("{\\bfseries Рис.4 - Отправка запроса к открытому API}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 51 (face (bold) fontified t) 51 52 (fontified t)) . -22218) 22271) nil (26712 15151 124998 758000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22240 . 22241) (nil fontified nil 22201 . 22241) (22201 . 22241)) nil (26712 15151 124998 437000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22257) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1)) nil (26712 15151 124997 625000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22257) (undo-tree-id160 . -1)) nil (26712 15151 124995 451000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22257) (undo-tree-id159 . 1)) nil (26712 15151 124994 800000) 0 nil])
([nil nil ((22257 . 22278) (22502 . 22518)) nil (26712 15151 124994 149000) 0 nil])
([nil nil ((22675 . 22676)) nil (26712 15151 124993 588000) 0 nil])
([nil nil ((#("{\\bfseries Рис.5 - фрагмент промежуточных данных из текста страницы}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 20 (face (bold) fontified t) 20 67 (face (bold) fontified t) 67 68 (fontified t)) . -22659) (undo-tree-id108 . 51) (undo-tree-id109 . -16) (undo-tree-id110 . -16) (undo-tree-id111 . -16) (undo-tree-id112 . -16) (undo-tree-id113 . -16) (undo-tree-id114 . -16) (undo-tree-id115 . -16) (undo-tree-id116 . -16) (undo-tree-id117 . -16) (undo-tree-id118 . -16) (undo-tree-id119 . -16) (undo-tree-id120 . -16) (undo-tree-id121 . -16) (undo-tree-id122 . -16) (undo-tree-id123 . -16) (undo-tree-id124 . -16) (undo-tree-id125 . -16) (undo-tree-id126 . -16) (undo-tree-id127 . -16) (undo-tree-id128 . -16) (undo-tree-id129 . -16) (undo-tree-id130 . -16) (undo-tree-id131 . -16) (undo-tree-id132 . -16) (undo-tree-id133 . -16) (undo-tree-id134 . -16) (undo-tree-id135 . -16) (undo-tree-id136 . -16) (undo-tree-id137 . -16) (undo-tree-id138 . -16) (undo-tree-id139 . -16) (undo-tree-id140 . -16) (undo-tree-id141 . -16) (undo-tree-id142 . -16) (undo-tree-id143 . -16) (undo-tree-id144 . -16) (undo-tree-id145 . -16) (undo-tree-id146 . -16) (undo-tree-id147 . -16) (undo-tree-id148 . -16) (undo-tree-id149 . -16) (undo-tree-id150 . -16) (undo-tree-id151 . -16) (undo-tree-id152 . -16) (undo-tree-id153 . -16) (undo-tree-id154 . -16) (undo-tree-id155 . -16) (undo-tree-id156 . -16) (undo-tree-id157 . -16) (undo-tree-id158 . -16) 22728) nil (26712 15151 124992 215000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22697 . 22698) (nil fontified nil 22642 . 22698) (22642 . 22698)) nil (26712 15151 124969 292000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22714) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1)) nil (26712 15151 124968 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22714) (undo-tree-id30 . 1) (undo-tree-id31 . -1)) nil (26712 15151 124918 367000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22714) (undo-tree-id28 . 1) (undo-tree-id29 . 1)) nil (26712 15151 124917 205000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22540)) nil (26712 15151 124909 0) 0 nil])
([nil nil ((22713 . 22734) (23878 . 23894)) nil (26712 15151 124908 689000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23915)) nil (26712 15151 124908 308000) 0 nil])
([nil nil ((24099 . 24100) (#("
" 0 1 (face (bold) fontified t)) . -24099) 24034) nil (26712 15151 125125 4000) 0 nil])
([nil nil ((#("{\\bfseries Рис.6- Иерархия классов и свойств разработанной модели {[}12{]}}" 0 1 (fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 65 (face (bold) fontified t) 65 66 (face (bold) fontified t) 66 74 (face (bold) fontified t) 74 75 (fontified t)) . -24034) (undo-tree-id246 . -64) 24110) nil (26712 15187 258621 859000) 0 nil] [nil nil ((24034 . 24051) (24110 . 24125)) ((#("\\end{equation}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 13 (face font-lock-function-name-face fontified t latex-env-pair t) 13 14 (fontified t latex-env-pair t) 14 15 (fontified t)) . 24110) (undo-tree-id190 . 15) (#("\\begin{equation}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 15 (face font-lock-function-name-face fontified t latex-env-pair t) 15 16 (fontified t latex-env-pair t) 16 17 (fontified t)) . 24034) (undo-tree-id191 . -17)) (26712 15151 124904 471000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24079 . 24080) (nil fontified nil 24017 . 24080) (24017 . 24080)) nil (26712 15187 258621 148000) 0 nil])
nil
([nil nil ((24022 . 24023)) nil (26712 15187 258620 908000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24097) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1)) nil (26712 15187 258620 246000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24097) (undo-tree-id237 . -1)) nil (26712 15187 258617 782000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24097) (undo-tree-id235 . 1) (undo-tree-id236 . -1)) nil (26712 15187 258617 301000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24097) (undo-tree-id234 . 1)) nil (26712 15187 258616 519000) 0 nil])
([nil nil ((24283 . 24284) (#("
" 0 1 (face (bold) fontified t)) . -24283) 24215) nil (26712 15187 258615 878000) 0 nil])
([nil nil ((#("{\\bfseries Рис.7 - Граф семантической сети геоинформационной системы {[}12{]}}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 17 (face (bold) fontified t) 17 68 (face (bold) fontified t) 68 69 (face (bold) fontified t) 69 77 (face (bold) fontified t) 77 78 (fontified t)) . -24215) (undo-tree-id230 . -67) (undo-tree-id231 . -68) (undo-tree-id232 . -68) (undo-tree-id233 . -68) 24294) nil (26712 15187 258615 397000) 0 nil])
([nil nil ((nil rear-nonsticky nil 24263 . 24264) (nil fontified nil 24198 . 24264) (24198 . 24264)) nil (26712 15187 258613 824000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24280) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1)) nil (26712 15187 258613 303000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24280) (undo-tree-id222 . -1)) nil (26712 15187 258610 388000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24280) (undo-tree-id221 . 1)) nil (26712 15187 258609 777000) 0 nil])
([nil nil ((24280 . 24301) (25095 . 25111)) nil (26712 15187 258609 206000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 25132)) nil (26712 15187 258608 845000) 0 nil])
([nil nil ((25320 . 25321) (#("
" 0 1 (face (bold) fontified t)) . -25320) 25251) nil (26712 15187 258608 474000) 0 nil])
([nil nil ((#("{\\bfseries Рис.8 - Фрагмент программного кода для создания объектов в онтологии}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 69 (face (bold) fontified t) 69 70 (face (bold) fontified t) 70 79 (face (bold) fontified t) 79 80 (fontified t)) . -25251) (undo-tree-id216 . -68) (undo-tree-id217 . -69) (undo-tree-id218 . -69) (undo-tree-id219 . -69) (undo-tree-id220 . -69) 25332) nil (26712 15187 258608 54000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25301 . 25302) (nil fontified nil 25234 . 25302) (25234 . 25302)) nil (26712 15187 258606 531000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 25318) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1)) nil (26712 15187 258605 789000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 25318) (undo-tree-id207 . -1)) nil (26712 15187 258602 22000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 25318) (undo-tree-id206 . 1)) nil (26712 15187 258601 351000) 0 nil])
([nil nil ((25318 . 25339) (26200 . 26216)) nil (26712 15187 258600 720000) 0 nil])
([nil nil ((26417 . 26418) (#("
" 0 1 (face (bold) fontified t)) . -26417) 26357) nil (26712 15187 258600 289000) 0 nil])
([nil nil ((#("{\\bfseries Рис.9 - Созданная онтология в редакторе Protégé с инициализированной логикой {[}12{]}}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 60 (face (bold) fontified t) 60 61 (face (bold) fontified t) 61 96 (face (bold) fontified t) 96 97 (fontified t)) . -26357) (undo-tree-id201 . -59) (undo-tree-id202 . -60) (undo-tree-id203 . -60) (undo-tree-id204 . -60) (undo-tree-id205 . -60) 26455) nil (26712 15187 258599 718000) 0 nil])
([nil nil ((nil rear-nonsticky nil 26424 . 26425) (nil fontified nil 26340 . 26425) (26340 . 26425)) nil (26712 15187 258597 674000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 26440) (undo-tree-id200 . -1)) nil (26712 15187 258597 123000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 26440) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1)) nil (26712 15187 258595 841000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 26440)) nil (26712 15187 258585 111000) 0 nil])
([nil nil ((26441 . 26462) (27186 . 27202)) nil (26712 15187 258584 469000) 0 nil])
([nil nil ((27293 . 27294) (#("
" 0 1 (face (bold) fontified t)) . -27293) 27224) nil (26712 15187 258583 648000) 0 nil])
([nil nil ((27244 . 27245)) nil (26712 15187 258579 610000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27868 . 27869) (nil fontified nil 27338 . 27869) (27338 . 27869) (#("
%% \\begin{longtable}[]{@{}
%%   >{\\raggedright\\arraybackslash}p{(\\linewidth - 10\\tabcolsep) * \\real{0.1299}}
%%   >{\\raggedright\\arraybackslash}p{(\\linewidth - 10\\tabcolsep) * \\real{0.1632}}
%%   >{\\raggedright\\arraybackslash}p{(\\linewidth - 10\\tabcolsep) * \\real{0.1958}}
%%   >{\\raggedright\\arraybackslash}p{(\\linewidth - 10\\tabcolsep) * \\real{0.1631}}
%%   >{\\raggedright\\arraybackslash}p{(\\linewidth - 10\\tabcolsep) * \\real{0.1143}}
%%   >{\\raggedright\\arraybackslash}p{(\\linewidth - 10\\tabcolsep) * \\real{0.2337}}@{}}
%% \\toprule\\noalign{}
%% \\begin{minipage}[b]{\\linewidth}\\raggedright
%% эксперименты
%% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
%% Количество извлечённых сущностей
%% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
%% Точность (Precision)
%% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
%% Полнота (Recall)
%% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
%% F1-score
%% \\end{minipage} & \\begin{minipage}[b]{\\linewidth}\\raggedright
%% Время выполнения (сек)
%% \\end{minipage} \\\\
%% \\midrule\\noalign{}
%% \\endhead
%% \\bottomrule\\noalign{}
%% \\endlastfoot
%% 1 & 120 & 0.89 & 0.85 & 0.87 & 12.4 \\\\
%% 2 & 132 & 0.91 & 0.87 & 0.89 & 11.8 \\\\
%% 3 & 127 & 0.90 & 0.86 & 0.88 & 12.1 \\\\
%% 4 & 135 & 0.92 & 0.88 & 0.90 & 11.5 \\\\
%% 5 & 130 & 0.91 & 0.87 & 0.89 & 11.9 \\\\
%% \\end{longtable}" 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 10 (face font-lock-comment-face fontified t) 10 21 (face font-lock-comment-face fontified t latex-env-pair t) 21 28 (face font-lock-comment-face fontified t) 28 33 (face font-lock-comment-delimiter-face fontified t) 33 110 (face font-lock-comment-face fontified t) 110 115 (face font-lock-comment-delimiter-face fontified t) 115 127 (face font-lock-comment-face fontified t) 127 192 (face font-lock-comment-face fontified t) 192 197 (face font-lock-comment-delimiter-face fontified t) 197 274 (face font-lock-comment-face fontified t) 274 279 (face font-lock-comment-delimiter-face fontified t) 279 356 (face font-lock-comment-face fontified t) 356 361 (face font-lock-comment-delimiter-face fontified t) 361 438 (face font-lock-comment-face fontified t) 438 443 (face font-lock-comment-delimiter-face fontified t) 443 524 (face font-lock-comment-face fontified t) 524 527 (face font-lock-comment-delimiter-face fontified t) 527 542 (face font-lock-comment-face fontified t) 542 546 (face font-lock-comment-face fontified t) 546 549 (face font-lock-comment-delimiter-face fontified t) 549 555 (face font-lock-comment-face fontified t) 555 565 (face font-lock-comment-face fontified t latex-env-pair t) 565 593 (face font-lock-comment-face fontified t) 593 596 (face font-lock-comment-delimiter-face fontified t) 596 609 (face font-lock-comment-face fontified t) 609 612 (face font-lock-comment-delimiter-face fontified t) 612 616 (face font-lock-comment-face fontified t) 616 626 (face font-lock-comment-face fontified t latex-env-pair t) 626 635 (face font-lock-comment-face fontified t) 635 639 (face font-lock-comment-face fontified t latex-env-pair t) 639 645 (face font-lock-comment-face fontified t latex-env-pair t) 645 673 (face font-lock-comment-face fontified t) 673 676 (face font-lock-comment-delimiter-face fontified t) 676 709 (face font-lock-comment-face fontified t) 709 712 (face font-lock-comment-delimiter-face fontified t) 712 716 (face font-lock-comment-face fontified t) 716 726 (face font-lock-comment-face fontified t latex-env-pair t) 726 735 (face font-lock-comment-face fontified t) 735 745 (face font-lock-comment-face fontified t latex-env-pair t) 745 773 (face font-lock-comment-face fontified t) 773 776 (face font-lock-comment-delimiter-face fontified t) 776 797 (face font-lock-comment-face fontified t) 797 800 (face font-lock-comment-delimiter-face fontified t) 800 804 (face font-lock-comment-face fontified t) 804 814 (face font-lock-comment-face fontified t latex-env-pair t) 814 823 (face font-lock-comment-face fontified t) 823 833 (face font-lock-comment-face fontified t latex-env-pair t) 833 861 (face font-lock-comment-face fontified t) 861 864 (face font-lock-comment-delimiter-face fontified t) 864 881 (face font-lock-comment-face fontified t) 881 884 (face font-lock-comment-delimiter-face fontified t) 884 888 (face font-lock-comment-face fontified t) 888 898 (face font-lock-comment-face fontified t latex-env-pair t) 898 907 (face font-lock-comment-face fontified t) 907 917 (face font-lock-comment-face fontified t latex-env-pair t) 917 945 (face font-lock-comment-face fontified t) 945 948 (face font-lock-comment-delimiter-face fontified t) 948 957 (face font-lock-comment-face fontified t) 957 960 (face font-lock-comment-delimiter-face fontified t) 960 964 (face font-lock-comment-face fontified t) 964 974 (face font-lock-comment-face fontified t latex-env-pair t) 974 983 (face font-lock-comment-face fontified t) 983 993 (face font-lock-comment-face fontified t latex-env-pair t) 993 1021 (face font-lock-comment-face fontified t) 1021 1024 (face font-lock-comment-delimiter-face fontified t) 1024 1047 (face font-lock-comment-face fontified t) 1047 1050 (face font-lock-comment-delimiter-face fontified t) 1050 1054 (face font-lock-comment-face fontified t) 1054 1064 (face font-lock-comment-face fontified t latex-env-pair t) 1064 1068 (face font-lock-comment-face fontified t) 1068 1071 (face font-lock-comment-delimiter-face fontified t) 1071 1090 (face font-lock-comment-face fontified t) 1090 1093 (face font-lock-comment-delimiter-face fontified t) 1093 1102 (face font-lock-comment-face fontified t) 1102 1105 (face font-lock-comment-delimiter-face fontified t) 1105 1112 (face font-lock-comment-face fontified t) 1112 1127 (fontified t face font-lock-comment-face) 1127 1130 (face font-lock-comment-delimiter-face fontified t) 1130 1143 (face font-lock-comment-face fontified t) 1143 1146 (face font-lock-comment-delimiter-face fontified t) 1146 1185 (face font-lock-comment-face fontified t) 1185 1188 (face font-lock-comment-delimiter-face fontified t) 1188 1227 (face font-lock-comment-face fontified t) 1227 1230 (face font-lock-comment-delimiter-face fontified t) 1230 1269 (face font-lock-comment-face fontified t) 1269 1272 (face font-lock-comment-delimiter-face fontified t) 1272 1311 (face font-lock-comment-face fontified t) 1311 1314 (face font-lock-comment-delimiter-face fontified t) 1314 1353 (face font-lock-comment-face fontified t) 1353 1356 (face font-lock-comment-delimiter-face fontified t) 1356 1360 (face font-lock-comment-face fontified t) 1360 1371 (face font-lock-comment-face fontified t latex-env-pair t)) . 27338) (undo-tree-id252 . -1370) (undo-tree-id253 . -1353) (undo-tree-id254 . -1353) 28710 (t 26712 15187 260168 334000)) nil (26712 15268 675720 48000) 0 nil])
([nil nil ((#("% \\usepackage{tabularray}
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 26 (face font-lock-comment-face fontified t)) . 27338) (undo-tree-id248 . -25) (undo-tree-id249 . -26) (undo-tree-id250 . -26) (undo-tree-id251 . -26)) nil (26712 15268 675813 813000) 0 nil])
([nil nil ((#("{\\bfseries Таблица 1 - Результаты экспериментов по извлечению данных с веб-страницы с использованием ChatGPT 3.5}
" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 70 (face (bold) fontified t) 70 71 (face (bold) fontified t) 71 112 (face (bold) fontified t) 112 113 (fontified t) 113 114 (fontified t)) . -27224) (undo-tree-id255 . -114) (undo-tree-id256 . -114) (undo-tree-id257 . 93) (undo-tree-id258 . -114) (undo-tree-id259 . -114) (undo-tree-id260 . -114) (undo-tree-id261 . -114) (undo-tree-id262 . -114) (undo-tree-id263 . -114) (undo-tree-id264 . -114) (undo-tree-id265 . -114) (undo-tree-id266 . -114) (undo-tree-id267 . -114) (undo-tree-id268 . -114) (undo-tree-id269 . -114) (undo-tree-id270 . -114) (undo-tree-id271 . -114) (undo-tree-id272 . -114) (undo-tree-id273 . -114) (undo-tree-id274 . -114) (undo-tree-id275 . -114) (undo-tree-id276 . -114) (undo-tree-id277 . -114) (undo-tree-id278 . -114) 27338) nil (26712 15271 598894 263000) 0 nil] [nil nil ((#("{\\bfseries Таблица 1 - Результаты экспериментов по извлечению данных с веб-страницы с использованием ChatGPT 3.5}" 0 1 (fontified t) 1 10 (face font-lock-keyword-face fontified t) 10 70 (face (bold) fontified t) 70 71 (face (bold) fontified t) 71 112 (face (bold) fontified t) 112 113 (fontified t)) . -27224) (undo-tree-id247 . 92) 27338) ((27224 . 27337)) (26712 15268 675711 853000) 0 nil])
([nil nil ((27241 . 27242) 27224) nil (26712 15271 598876 49000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 27367 . 27368) (nil fontified nil 27242 . 27368) (27242 . 27368)) nil (26712 15271 598872 803000) 0 nil])
([nil nil ((27858 . 27879) (29479 . 29495) (t 26712 15271 601726 568000)) nil (26712 15287 647635 141000) 0 nil])
([nil nil ((29517 . 29532) (29540 . 29553)) nil (26712 15287 647634 871000) 0 nil])
([nil nil ((29569 . 29588) (33141 . 33158)) nil (26712 15287 647634 160000) 0 nil])
([nil nil ((#("\\begin{quote}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 12 (face font-lock-function-name-face fontified t latex-env-pair t) 12 13 (fontified t latex-env-pair t) 13 14 (fontified t)) . 33178) (undo-tree-id280 . -13) (undo-tree-id281 . -14)) nil (26712 15287 647633 619000) 0 nil])
([nil nil ((#("\\end{quote}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 10 (face font-lock-function-name-face fontified t latex-env-pair t) 10 11 (fontified t latex-env-pair t) 11 12 (fontified t)) . 33217) (undo-tree-id279 . -11)) nil (26712 15287 647631 555000) 0 nil])
([nil nil ((33178 . 33197) (35353 . 35370)) nil (26712 15311 731610 860000) 0 nil])
([nil nil ((27442 . 27444) (#("19" 0 2 (fontified t)) . 27442) (undo-tree-id307 . -1)) nil (26712 15318 286718 7000) 0 nil] [nil nil ((#("  width = \\linewidth,
" 0 10 (fontified t) 10 20 (face font-lock-keyword-face fontified t) 20 22 (fontified t)) . 27404) (undo-tree-id295 . -21) (undo-tree-id296 . -22) (undo-tree-id297 . -22) (undo-tree-id298 . -22) (undo-tree-id299 . -22) (undo-tree-id300 . -22) (undo-tree-id301 . -22) (undo-tree-id302 . -22) (undo-tree-id303 . -22) (undo-tree-id304 . -22) (undo-tree-id305 . -22) (undo-tree-id306 . -22) (t 26712 15287 653642 334000)) ((27404 . 27426)) (26712 15311 376794 802000) 0 nil])
([nil nil ((31661 . 31663) (t 26712 15318 289481 445000)) nil (26712 15347 84369 479000) 0 nil])
([nil nil ((#("  colspec = {Q[119]Q[263]Q[154]Q[131]Q[79]Q[185]},
" 0 50 (fontified t) 50 51 (fontified t)) . 27404) (undo-tree-id282 . -50) (undo-tree-id283 . -51) (undo-tree-id284 . -51) (undo-tree-id285 . -51) (undo-tree-id286 . -51) (undo-tree-id287 . -51) (undo-tree-id288 . -51) (undo-tree-id289 . -51) (undo-tree-id290 . -51) (undo-tree-id291 . -51) (undo-tree-id292 . -51) (undo-tree-id293 . -50) (undo-tree-id294 . -51)) ((27404 . 27455) (t 26712 15302 773562 948000)) (26712 15302 770549 848000) 0 nil])
([nil nil ((33320 . 33321) (#("
" 0 1 (fontified t)) . -33320) (undo-tree-id308 . -1) (#("
" 0 1 (fontified t)) . -33320) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) 33310 (t 26712 15347 87330 44000)) nil (26712 15366 109139 426000) 0 nil])
nil
([nil nil ((33328 . 33330)) nil (26712 15366 109126 843000) 0 nil])
([nil nil ((34246 . 34247) (#("
" 0 1 (fontified t)) . -34246) (undo-tree-id314 . -1) (#("
" 0 1 (fontified t)) . -34246) (undo-tree-id315 . -1) (undo-tree-id316 . -1) 34245 (t 26712 15366 111229 960000)) nil (26712 15374 346291 182000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -34613) (undo-tree-id312 . -1) (undo-tree-id313 . -1) 34592) nil (26712 15374 346288 317000) 0 nil])
([nil nil ((34613 . 34614) (#("
" 0 1 (fontified t)) . -34613) 34612) nil (26712 15374 346276 695000) 0 nil])
([nil nil ((34622 . 34624) (t 26712 15374 348186 605000)) nil (26712 15387 796912 194000) 0 nil])
([nil nil ((34415 . 34416) (#("
" 0 1 (fontified t)) . -34415) (#("
" 0 1 (fontified t)) . -34415) (undo-tree-id317 . -1) 34414 (t 26712 15387 799115 786000)) nil (26712 15392 248656 307000) 0 nil])
([nil nil ((34423 . 34425) (t 26712 15392 251092 340000)) nil (26712 15401 216702 310000) 0 nil])
([nil nil ((nil rear-nonsticky nil 125 . 126) (#("
" 0 1 (fontified nil)) . -355) (125 . 356) (t 26712 15401 219045 99000)) nil (26712 15457 901865 846000) 0 nil])
([nil nil ((24 . 46) (356 . 376)) nil (26712 15457 901865 476000) 0 nil])
([nil nil ((366 . 367)) nil (26712 15457 901865 275000) 0 nil])
([nil nil ((334 . 335)) nil (26712 15457 901865 135000) 0 nil])
([nil nil ((306 . 307)) nil (26712 15457 901864 995000) 0 nil])
([nil nil ((275 . 276)) nil (26712 15457 901864 854000) 0 nil])
([nil nil ((275 . 276)) nil (26712 15457 901864 704000) 0 nil])
([nil nil ((180 . 181)) nil (26712 15457 901864 464000) 0 nil])
([nil nil ((245 . 246)) nil (26712 15457 901864 233000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 278)) nil (26712 15457 901864 53000) 0 nil])
([nil nil ((148 . 153) (147 . 148) 147) nil (26712 15457 901863 873000) 0 nil])
([nil nil ((215 . 227) (201 . 214) (191 . 200) (178 . 190) (165 . 177) (148 . 164)) nil (26712 15457 901863 201000) 0 nil])
([nil nil ((214 . 215) (#("
" 0 1 (fontified t)) . -214) (200 . 201) (#("
" 0 1 (fontified t)) . -200) (190 . 191) (#("
" 0 1 (fontified t)) . -190) (177 . 178) (#("
" 0 1 (fontified t)) . -177) (164 . 165) (#("
" 0 1 (fontified t)) . -164) 148) nil (26712 15457 901862 280000) 0 nil])
([nil nil ((164 . 165)) nil (26712 15457 901861 538000) 0 nil])
([nil nil ((#("А. Даулеткалиева, А. Муканова, А. Назырова, Б. Ергеш, Л. Жеткенбай, А. Бурибаева" 0 13 (fontified t) 13 17 (fontified t) 17 18 (fontified t) 18 30 (fontified t) 30 31 (fontified t) 31 43 (fontified t) 43 44 (fontified t) 44 53 (fontified t) 53 54 (fontified t) 54 67 (fontified t) 67 68 (fontified t) 68 80 (fontified t)) . 148) (undo-tree-id318 . -79) (undo-tree-id319 . 63)) nil (26712 15457 901860 947000) 0 nil])
([nil nil ((nil rear-nonsticky nil 145 . 146) (nil fontified nil 66 . 146) (66 . 146) 65) nil (26712 15457 901852 441000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 227)) nil (26712 15457 901848 113000) 0 nil])
([nil nil ((3953 . 3954) (t 26712 15457 904746 214000)) nil (26712 15465 294120 688000) 0 nil])
([nil nil ((4018 . 4019)) nil (26712 15465 294120 468000) 0 nil])
([nil nil ((4050 . 4051)) nil (26712 15465 294120 258000) 0 nil])
([nil nil ((4082 . 4083)) nil (26712 15465 294119 506000) 0 nil])
([nil nil ((4111 . 4112)) nil (26712 15465 294119 65000) 0 nil])
([nil nil ((4144 . 4145)) nil (26712 15465 294115 819000) 0 nil])
([nil nil ((14078 . 14079) (#("8" 0 1 (fontified t)) . 14078) (undo-tree-id320 . -1) (t 26712 15465 296707 198000)) nil (26712 15540 994260 563000) 0 nil])
([nil nil ((#("\\end{multicols}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t)) . 14005) (undo-tree-id323 . -15) (undo-tree-id324 . -14) 14019 (t 26712 15540 996307 118000)) nil (26712 15551 366557 733000) 0 nil])
([nil nil ((#("\\begin{multicols}{2}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t latex-env-pair t) 7 16 (face font-lock-function-name-face fontified t latex-env-pair t) 16 17 (fontified t latex-env-pair t) 17 21 (fontified t)) . 14183) (undo-tree-id321 . -20) (undo-tree-id322 . -21)) nil (26712 15551 366553 4000) 0 nil])
([nil nil ((#("\\end{multicols}

\\begin{figure}[H]
	\\centering
	\\includegraphics[width=0.8\\textwidth]{media/ict2/image150}
	\\caption*{Рис.2 - Анализ страницы wikipedia.org}
\\end{figure}

\\begin{multicols}{2}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t latex-env-pair t) 5 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 16 (fontified t) 16 17 (fontified t) 17 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t latex-env-pair t) 24 30 (face font-lock-function-name-face fontified t latex-env-pair t) 30 31 (fontified t latex-env-pair t) 31 36 (fontified t) 36 46 (face font-lock-keyword-face fontified t) 46 48 (fontified t) 48 64 (face font-lock-keyword-face fontified t) 64 74 (fontified t) 74 84 (face font-lock-keyword-face fontified t) 84 86 (fontified t) 86 96 (face font-lock-builtin-face fontified t) 96 105 (face font-lock-builtin-face fontified t) 105 107 (fontified t) 107 108 (fontified t) 108 117 (face font-lock-keyword-face fontified t) 117 118 (fontified t) 118 154 (fontified t) 154 155 (fontified t rear-nonsticky t) 155 157 (fontified t) 157 161 (face font-lock-keyword-face fontified t) 161 162 (fontified t latex-env-pair t) 162 168 (face font-lock-function-name-face fontified t latex-env-pair t) 168 169 (fontified t latex-env-pair t) 169 170 (fontified t) 170 171 (fontified t) 171 177 (face font-lock-keyword-face fontified t) 177 178 (fontified t latex-env-pair t) 178 187 (face font-lock-function-name-face fontified t latex-env-pair t) 187 188 (fontified t latex-env-pair t) 188 192 (fontified t)) . 17132) (undo-tree-id360 . -191) (undo-tree-id361 . -171) (undo-tree-id362 . -171) (undo-tree-id363 . -171) 17303 (t 26712 15551 372252 210000)) nil (26712 15587 939982 641000) 0 nil])
([nil nil ((17131 . 17132) 17070) nil (26712 15587 939981 58000) 0 nil])
([nil nil ((nil rear-nonsticky nil 18070 . 18071) (#("
" 0 1 (fontified nil)) . -18262) (18070 . 18263)) nil (26712 15587 939980 598000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 18070) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1)) nil (26712 15587 939977 131000) 0 nil])
([nil nil ((16668 . 16756) (#("https://kk.wikipedia.org/wiki/Geography\\_of\\_Kazakhstan" 0 39 (fontified t) 39 41 (face font-lock-keyword-face fontified t) 41 43 (fontified t) 43 45 (face font-lock-keyword-face fontified t) 45 55 (fontified t)) . -16668) (undo-tree-id368 . -54) (undo-tree-id369 . -54) 16723 (t 26712 15587 942058 537000)) nil (26712 15626 39429 589000) 0 nil])
([nil nil ((#("\\" 0 1 (face tex-verbatim fontified t)) . 16713) (undo-tree-id366 . -1) (undo-tree-id367 . -1)) nil (26712 15626 39428 136000) 0 nil])
([nil nil ((#("\\" 0 1 (face tex-verbatim fontified t)) . 16716) (undo-tree-id364 . -1) (undo-tree-id365 . -1)) nil (26712 15626 39424 209000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . 18174) (t 26712 15626 42856 543000) (18175 . 18176) 18174 (t 26712 15626 42856 543000)) nil (26712 15707 888659 296000) 0 nil])
([nil nil ((nil fontified t 18174 . 18175) (#("7" 0 1 (fontified t)) . 18174) (18175 . 18176) 18174) nil (26712 15707 888655 799000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . 19094) (t 26712 15707 891421 854000) (19095 . 19096) 19094 (t 26712 15707 891421 854000)) nil (26712 15722 44734 498000) 0 nil])
([nil nil ((nil fontified t 19094 . 19095) (#("7" 0 1 (fontified t)) . 19094) (19095 . 19096) 19094) nil (26712 15722 44730 671000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . 22514) (t 26712 15722 47346 562000) (22515 . 22516) 22514 (t 26712 15722 47346 562000)) nil (26712 15802 4843 925000) 0 nil])
([nil nil ((nil fontified t 22514 . 22515) (#("7" 0 1 (fontified t)) . 22514) (22515 . 22516) 22514) nil (26712 15802 4843 324000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . 22954) (22955 . 22956) 22954) nil (26712 15802 4842 702000) 0 nil])
([nil nil ((nil fontified t 22954 . 22955) (#("7" 0 1 (fontified t)) . 22954) (22955 . 22956) 22954) nil (26712 15802 4839 246000) 0 nil])
([nil nil ((nil fontified t 18174 . 18175) (t 26712 15802 7920 715000) (#("6" 0 1 (fontified t)) . 18174) (t 26712 15802 7920 715000) (18175 . 18176) 18174 (t 26712 15802 7920 715000)) nil (26712 15933 424469 489000) 0 nil])
([nil nil ((nil fontified t 19094 . 19095) (#("6" 0 1 (fontified t)) . 19094) (19095 . 19096) 19094) nil (26712 15933 424465 161000) 0 nil])
([nil nil ((#("
На рисунке 5 показан код Python, созданный в результате запроса
ChatGPT-3.5. Это обеспечивает непрерывную интеграцию в рабочий процесс
обработки программного обеспечения без необходимости дальнейшего анализа
или преобразования.

Использование этой стратегии упрощает управление данными. Это позволяет
автоматически получать структурированные данные и немедленно
использовать их для дальнейшего анализа или онтологического
моделирования.

В ответе модели словари и списки соответствуют заданной структуре. Это
имеет несколько важных преимуществ:

- ввод данных непосредственно в обработчик без дополнительных процедур
преобразования;

- OWLready2 очень совместим с другими инструментами для создания
онтологий;

- Масштабируемость и универсальность позволяют использовать полученные
данные в различных областях.
" 0 546 (fontified t) 546 547 (fontified t) 547 559 (fontified t) 559 618 (fontified t) 618 620 (fontified t) 620 634 (fontified t) 634 812 (fontified t)) . 21629) (undo-tree-id370 . -811) (undo-tree-id371 . -783) (undo-tree-id372 . -783) (undo-tree-id373 . -711) (undo-tree-id374 . -634) (undo-tree-id375 . -546) (undo-tree-id376 . -438) (undo-tree-id377 . -229) (undo-tree-id378 . -229) (undo-tree-id379 . -229) (undo-tree-id380 . -438) (undo-tree-id381 . -438) (undo-tree-id382 . -783) 22412 (t 26712 15933 427218 703000)) nil (26712 15990 636017 955000) 0 nil])
([nil nil ((21823 . 21824) 21803) nil (26712 15995 173998 334000) 0 nil] [nil nil ((22279 . 22280) 22259) ((#("
" 0 1 (fontified t)) . 22279)) (26712 15989 427436 948000) 0 nil])
([nil nil ((nil rear-nonsticky nil 21823 . 21824) (#("
" 0 1 (fontified nil)) . -22635) (21823 . 22636) 21803) nil (26712 15995 173997 813000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22279 . 22280) (#("
" 0 1 (fontified nil)) . -23091) (22279 . 23092) 22259) ((#("

На рисунке 5 показан код Python, созданный в результате запроса
ChatGPT-3.5. Это обеспечивает непрерывную интеграцию в рабочий процесс
обработки программного обеспечения без необходимости дальнейшего анализа
или преобразования.

Использование этой стратегии упрощает управление данными. Это позволяет
автоматически получать структурированные данные и немедленно
использовать их для дальнейшего анализа или онтологического
моделирования.

В ответе модели словари и списки соответствуют заданной структуре. Это
имеет несколько важных преимуществ:

- ввод данных непосредственно в обработчик без дополнительных процедур
преобразования;

- OWLready2 очень совместим с другими инструментами для создания
онтологий;

- Масштабируемость и универсальность позволяют использовать полученные
данные в различных областях.
" 0 1 (fontified nil rear-nonsticky nil) 1 2 (fontified nil) 2 547 (fontified t) 547 548 (fontified t) 548 560 (fontified t) 560 619 (fontified t) 619 621 (fontified t) 621 635 (fontified t) 635 784 (fontified t) 784 812 (fontified nil) 812 813 (fontified nil)) . 22279) (undo-tree-id383 . -1) (undo-tree-id384 . -812) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (23091 . 23092) (nil rear-nonsticky t 22279 . 22280) (t 26712 15970 748018 882000)) (26712 15970 745070 995000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 21824) (undo-tree-id596 . -1)) nil (26712 15995 173994 507000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . 21106) (t 26712 15995 176887 977000)) nil (26712 16028 853691 769000) 0 nil])
([nil nil ((#("
Готовое приглашение ввода можно найти в текстовом файле. запрос.текст.
Запрос загружается из файла перед отправкой. Этот метод сохранения
упрощает адаптацию содержимого приглашения к конкретным требованиям
области заголовка.

Асинхронный метод взаимодействия API позволяет обрабатывать несколько
запросов одновременно. Это особенно полезно при использовании модели в
системах с высокой нагрузкой.

ChatGPT 3.5 завершает запрос и возвращает машиночитаемый ответ
(например, структуры данных JSON или Python). Это упрощает дальнейшую
обработку результатов и интеграцию в онтологическую модель.
" 0 1 (fontified t) 1 72 (fontified t) 72 226 (fontified t) 226 453 (fontified t) 453 462 (fontified t) 462 525 (fontified t) 525 532 (fontified t) 532 592 (fontified t)) . 21036) (undo-tree-id669 . -591) (undo-tree-id670 . -532) (undo-tree-id671 . -532) (undo-tree-id672 . -592) (undo-tree-id673 . -592) (undo-tree-id674 . -592) (undo-tree-id675 . -592) (undo-tree-id676 . -592) (undo-tree-id677 . -592) (undo-tree-id678 . -398) (undo-tree-id679 . -226) (undo-tree-id680 . -226) (undo-tree-id681 . -398) (undo-tree-id682 . -592) (undo-tree-id683 . -592) (undo-tree-id684 . -592) (undo-tree-id685 . -462) (undo-tree-id686 . -462) (undo-tree-id687 . -462) (undo-tree-id688 . -462) (undo-tree-id689 . -462) (undo-tree-id690 . -462) (undo-tree-id691 . -462) (undo-tree-id692 . -462) (undo-tree-id693 . -399) (undo-tree-id694 . -399) (undo-tree-id695 . -399) (undo-tree-id696 . -399) (undo-tree-id697 . -399) (undo-tree-id698 . -398) (undo-tree-id699 . -398) (undo-tree-id700 . -398) (undo-tree-id701 . -398) (undo-tree-id702 . -398) (undo-tree-id703 . -368) (undo-tree-id704 . -368) (undo-tree-id705 . -368) (undo-tree-id706 . -368) (undo-tree-id707 . -368) (undo-tree-id708 . -297) (undo-tree-id709 . -297) (undo-tree-id710 . -297) (undo-tree-id711 . -297) (undo-tree-id712 . -297) (undo-tree-id713 . -227) (undo-tree-id714 . -227) (undo-tree-id715 . -227) (undo-tree-id716 . -227) (undo-tree-id717 . -227) (undo-tree-id718 . -226) (undo-tree-id719 . -226) (undo-tree-id720 . -226) (undo-tree-id721 . -226) (undo-tree-id722 . -226) (undo-tree-id723 . -207) (undo-tree-id724 . -207) (undo-tree-id725 . -207) (undo-tree-id726 . -207) (undo-tree-id727 . -207) (undo-tree-id728 . -139) (undo-tree-id729 . -139) (undo-tree-id730 . -139) (undo-tree-id731 . -139) (undo-tree-id732 . -139) (undo-tree-id733 . -72) (undo-tree-id734 . -72) (undo-tree-id735 . -72) (undo-tree-id736 . -72) (undo-tree-id737 . -72) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -72) (undo-tree-id771 . -72) (undo-tree-id772 . -72) (undo-tree-id773 . -72) (undo-tree-id774 . -72) (undo-tree-id775 . -139) (undo-tree-id776 . -139) (undo-tree-id777 . -139) (undo-tree-id778 . -139) (undo-tree-id779 . -139) (undo-tree-id780 . -207) (undo-tree-id781 . -207) (undo-tree-id782 . -207) (undo-tree-id783 . -207) (undo-tree-id784 . -207) (undo-tree-id785 . -226) (undo-tree-id786 . -226) (undo-tree-id787 . -226) (undo-tree-id788 . -226) (undo-tree-id789 . -226) (undo-tree-id790 . -227) (undo-tree-id791 . -227) (undo-tree-id792 . -227) (undo-tree-id793 . -227) (undo-tree-id794 . -227) (undo-tree-id795 . -297) (undo-tree-id796 . -297) (undo-tree-id797 . -297) (undo-tree-id798 . -297) (undo-tree-id799 . -297) (undo-tree-id800 . -368) (undo-tree-id801 . -368) (undo-tree-id802 . -368) (undo-tree-id803 . -368) (undo-tree-id804 . -368) (undo-tree-id805 . -398) (undo-tree-id806 . -398) (undo-tree-id807 . -398) (undo-tree-id808 . -398) (undo-tree-id809 . -398) (undo-tree-id810 . -399) (undo-tree-id811 . -399) (undo-tree-id812 . -399) (undo-tree-id813 . -399) (undo-tree-id814 . -399) (undo-tree-id815 . -462) (undo-tree-id816 . -462) (undo-tree-id817 . -462) (undo-tree-id818 . -462) (undo-tree-id819 . -462) (undo-tree-id820 . -462) (undo-tree-id821 . -462) (undo-tree-id822 . -462) (undo-tree-id823 . -462) (undo-tree-id824 . -462) (undo-tree-id825 . -462) (undo-tree-id826 . -462) (undo-tree-id827 . -462) (undo-tree-id828 . -462) (undo-tree-id829 . -462) (undo-tree-id830 . -532) (undo-tree-id831 . -532) (undo-tree-id832 . -532) (undo-tree-id833 . -532) (undo-tree-id834 . -532) (undo-tree-id835 . -532) (undo-tree-id836 . -532) (undo-tree-id837 . -532) (undo-tree-id838 . -532) (undo-tree-id839 . -532) (undo-tree-id840 . -532) (undo-tree-id841 . -532) (undo-tree-id842 . -532) (undo-tree-id843 . -532) (undo-tree-id844 . -532) (undo-tree-id845 . -532) (undo-tree-id846 . -532) (undo-tree-id847 . -532) (undo-tree-id848 . -532) (undo-tree-id849 . -297) (undo-tree-id850 . -532) (undo-tree-id851 . -532) (undo-tree-id852 . -532) (undo-tree-id853 . -532) (undo-tree-id854 . -592) 21568) nil (26712 16032 329037 647000) 0 nil] [nil nil ((#("
Этот метод позволяет эффективно обрабатывать запросы асинхронно. Это
снижает задержку при обмене данными, особенно при обработке многих
последовательных запросов. На рисунке 4 показан компьютерный код,
показывающий, как отправить запрос с использованием экземпляра класса
OpenAIClient.

Готовое приглашение ввода можно найти в текстовом файле. запрос.текст.
Запрос загружается из файла перед отправкой. Этот метод сохранения
упрощает адаптацию содержимого приглашения к конкретным требованиям
области заголовка.

Асинхронный метод взаимодействия API позволяет обрабатывать несколько
запросов одновременно. Это особенно полезно при использовании модели в
системах с высокой нагрузкой.

ChatGPT 3.5 завершает запрос и возвращает машиночитаемый ответ
(например, структуры данных JSON или Python). Это упрощает дальнейшую
обработку результатов и интеграцию в онтологическую модель.
" 0 1 (fontified t) 1 3 (fontified t) 3 70 (fontified t) 70 288 (fontified t) 288 359 (fontified t) 359 513 (fontified t) 513 740 (fontified t) 740 749 (fontified t) 749 812 (fontified t) 812 819 (fontified t) 819 879 (fontified t)) . 20749) (undo-tree-id597 . -878) (undo-tree-id598 . -819) (undo-tree-id599 . -819) (undo-tree-id600 . -879) (undo-tree-id601 . -879) (undo-tree-id602 . -879) (undo-tree-id603 . -879) (undo-tree-id604 . -879) (undo-tree-id605 . -879) (undo-tree-id606 . -685) (undo-tree-id607 . -513) (undo-tree-id608 . -287) (undo-tree-id609 . -287) (undo-tree-id610 . -287) (undo-tree-id611 . -513) (undo-tree-id612 . -513) (undo-tree-id613 . -685) (undo-tree-id614 . -685) (undo-tree-id615 . -879) (undo-tree-id616 . -879) (undo-tree-id617 . -879) (undo-tree-id618 . -879) (undo-tree-id619 . -879) (undo-tree-id620 . -879) (undo-tree-id621 . -686) (undo-tree-id622 . -686) (undo-tree-id623 . -686) (undo-tree-id624 . -749) (undo-tree-id625 . -749) (undo-tree-id626 . -749) (undo-tree-id627 . -749) (undo-tree-id628 . -749) (undo-tree-id629 . -749) (undo-tree-id630 . -749) (undo-tree-id631 . -749) (undo-tree-id632 . -749) (undo-tree-id633 . -749) (undo-tree-id634 . -749) (undo-tree-id635 . -749) (undo-tree-id636 . -749) (undo-tree-id637 . -749) (undo-tree-id638 . -749) (undo-tree-id639 . -749) (undo-tree-id640 . -749) (undo-tree-id641 . -749) (undo-tree-id642 . -749) (undo-tree-id643 . -749) (undo-tree-id644 . -819) (undo-tree-id645 . -819) (undo-tree-id646 . -819) (undo-tree-id647 . -819) (undo-tree-id648 . -819) (undo-tree-id649 . -819) (undo-tree-id650 . -819) (undo-tree-id651 . -819) (undo-tree-id652 . -819) (undo-tree-id653 . -819) (undo-tree-id654 . -819) (undo-tree-id655 . -819) (undo-tree-id656 . -819) (undo-tree-id657 . -819) (undo-tree-id658 . -819) (undo-tree-id659 . -819) (undo-tree-id660 . -819) (undo-tree-id661 . -819) (undo-tree-id662 . -819) (undo-tree-id663 . -584) (undo-tree-id664 . -819) (undo-tree-id665 . -819) (undo-tree-id666 . -819) (undo-tree-id667 . -819) (undo-tree-id668 . -879) 21568) ((20749 . 21628) (t 26712 16020 291753 305000)) (26712 16020 288544 279000) 0 nil])
([nil nil ((21230 . 21231) (t 26712 16032 331688 712000) 21210) nil (26712 16041 190393 184000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 21230 . 21231) (#("
" 0 1 (fontified nil)) . -21822) (21230 . 21823) 21210) nil (26712 16041 190392 182000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 21231) (undo-tree-id855 . -1)) nil (26712 16041 190389 317000) 0 nil])
([nil nil ((#("
В ответе модели словари и списки соответствуют заданной структуре. Это
имеет несколько важных преимуществ:

- ввод данных непосредственно в обработчик без дополнительных процедур
преобразования;

- OWLready2 очень совместим с другими инструментами для создания
онтологий;

- Масштабируемость и универсальность позволяют использовать полученные
данные в различных областях.

Благодаря этому формату данные из ChatGPT-3.5 могут быть автоматически
импортированы в онтологическую модель.

Иерархические связи и семантическая корректность сохраняются.

Это делает процесс создания онтологии более независимым и эффективным.
" 0 108 (fontified t) 108 109 (fontified t) 109 121 (fontified t) 121 180 (fontified t) 180 182 (fontified t) 182 196 (fontified t) 196 348 (fontified t) 348 373 (fontified t) 373 374 (fontified t) 374 375 (fontified t) 375 445 (fontified t) 445 446 (fontified t) 446 502 (fontified t) 502 542 (fontified t) 542 548 (fontified t) 548 620 (fontified t)) . 22260) (undo-tree-id856 . -619) (undo-tree-id857 . -549) (undo-tree-id858 . -549) (undo-tree-id859 . -548) (undo-tree-id860 . -485) (undo-tree-id861 . -108) (undo-tree-id862 . -108) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -72) (undo-tree-id881 . -72) (undo-tree-id882 . -72) (undo-tree-id883 . -72) (undo-tree-id884 . -72) (undo-tree-id885 . -108) (undo-tree-id886 . -108) (undo-tree-id887 . -108) (undo-tree-id888 . -108) (undo-tree-id889 . -108) (undo-tree-id890 . -109) (undo-tree-id891 . -109) (undo-tree-id892 . -109) (undo-tree-id893 . -109) (undo-tree-id894 . -109) (undo-tree-id895 . -180) (undo-tree-id896 . -180) (undo-tree-id897 . -180) (undo-tree-id898 . -180) (undo-tree-id899 . -180) (undo-tree-id900 . -196) (undo-tree-id901 . -196) (undo-tree-id902 . -196) (undo-tree-id903 . -196) (undo-tree-id904 . -196) (undo-tree-id905 . -197) (undo-tree-id906 . -197) (undo-tree-id907 . -197) (undo-tree-id908 . -197) (undo-tree-id909 . -197) (undo-tree-id910 . -197) (undo-tree-id911 . -262) (undo-tree-id912 . -262) (undo-tree-id913 . -262) (undo-tree-id914 . -262) (undo-tree-id915 . -262) (undo-tree-id916 . -262) (undo-tree-id917 . -273) (undo-tree-id918 . -273) (undo-tree-id919 . -273) (undo-tree-id920 . -273) (undo-tree-id921 . -273) (undo-tree-id922 . -273) (undo-tree-id923 . -274) (undo-tree-id924 . -274) (undo-tree-id925 . -274) (undo-tree-id926 . -274) (undo-tree-id927 . -274) (undo-tree-id928 . -274) (undo-tree-id929 . -345) (undo-tree-id930 . -345) (undo-tree-id931 . -345) (undo-tree-id932 . -345) (undo-tree-id933 . -345) (undo-tree-id934 . -345) (undo-tree-id935 . -374) (undo-tree-id936 . -374) (undo-tree-id937 . -374) (undo-tree-id938 . -374) (undo-tree-id939 . -374) (undo-tree-id940 . -374) (undo-tree-id941 . -375) (undo-tree-id942 . -375) (undo-tree-id943 . -375) (undo-tree-id944 . -375) (undo-tree-id945 . -375) (undo-tree-id946 . -375) (undo-tree-id947 . -446) (undo-tree-id948 . -446) (undo-tree-id949 . -446) (undo-tree-id950 . -446) (undo-tree-id951 . -446) (undo-tree-id952 . -446) (undo-tree-id953 . -485) (undo-tree-id954 . -485) (undo-tree-id955 . -485) (undo-tree-id956 . -485) (undo-tree-id957 . -485) (undo-tree-id958 . -485) (undo-tree-id959 . -486) (undo-tree-id960 . -486) (undo-tree-id961 . -486) (undo-tree-id962 . -486) (undo-tree-id963 . -486) (undo-tree-id964 . -486) (undo-tree-id965 . -548) (undo-tree-id966 . -548) (undo-tree-id967 . -548) (undo-tree-id968 . -548) (undo-tree-id969 . -548) (undo-tree-id970 . -548) (undo-tree-id971 . -549) (undo-tree-id972 . -549) (undo-tree-id973 . -549) (undo-tree-id974 . -549) (undo-tree-id975 . -549) (undo-tree-id976 . -549) (undo-tree-id977 . -549) (undo-tree-id978 . -549) (undo-tree-id979 . -549) (undo-tree-id980 . -549) (undo-tree-id981 . -549) (undo-tree-id982 . -549) (undo-tree-id983 . -549) (undo-tree-id984 . -549) (undo-tree-id985 . -549) (undo-tree-id986 . -549) (undo-tree-id987 . -549) (undo-tree-id988 . -549) (undo-tree-id989 . -549) (undo-tree-id990 . -549) (undo-tree-id991 . -549) (undo-tree-id992 . -549) (undo-tree-id993 . -549) (undo-tree-id994 . -549) (undo-tree-id995 . -620) 22809 (t 26712 16041 193641 154000)) nil (26712 16069 938571 310000) 0 nil])
([nil nil ((22470 . 22471) (t 26712 16069 941486 810000) 22450) nil (26712 16080 573902 88000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22470 . 22471) (#("
" 0 1 (fontified nil)) . -23090) (22470 . 23091) 22450) nil (26712 16080 573901 417000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 22471) (undo-tree-id996 . -1)) nil (26712 16080 573898 291000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . 24329) (t 26712 16080 576429 681000) (24330 . 24331) 24329 (t 26712 16080 576429 681000)) nil (26712 16101 890576 291000) 0 nil])
([nil nil ((nil fontified t 24329 . 24330) (#("7" 0 1 (fontified t)) . 24329) (24330 . 24331) 24329) nil (26712 16101 890571 813000) 0 nil])
([nil nil ((#("
Структура онтологической модели показана на рисунке 6. Семантические
характеристики административных единиц представлены их основными
классами, объектными свойствами, свойствами данных. Плагин protégévowl
использовался для создания онтологического графика для визуализации
семантических отношений между объектами. Эта визуализация показана на
рисунке 7. Онтологическая модель была автоматически обновлена
соответствующей информацией путем объединения данных ChatGPT - 3.5.
Кроме того, он расширил сферу своей темы. Таким образом, применение
предложенного метода подтверждает целесообразность динамического
обновления и автоматического синтеза онтологий с использованием данных
из онлайн-источников. В результате система становится семантически
богатой, масштабируемой и адаптивной.
" 0 208 (fontified t) 208 273 (fontified t) 273 274 (fontified t) 274 317 (fontified t) 317 333 (fontified t) 333 344 (fontified t) 344 495 (fontified t) 495 514 (fontified t) 514 542 (fontified t) 542 569 (fontified t) 569 574 (fontified t) 574 607 (fontified t) 607 661 (fontified t) 661 662 (fontified t) 662 678 (fontified t) 678 682 (fontified t) 682 745 (fontified t) 745 754 (fontified t) 754 783 (fontified t)) . 23473) (undo-tree-id997 . -782) (undo-tree-id998 . -745) (undo-tree-id999 . -745) (undo-tree-id1000 . -783) (undo-tree-id1001 . -783) (undo-tree-id1002 . -783) (undo-tree-id1003 . -783) (undo-tree-id1004 . -783) (undo-tree-id1005 . -783) (undo-tree-id1006 . -783) (undo-tree-id1007 . -783) (undo-tree-id1008 . -783) (undo-tree-id1009 . -783) (undo-tree-id1010 . -783) (undo-tree-id1011 . -783) (undo-tree-id1012 . -783) (undo-tree-id1013 . -783) (undo-tree-id1014 . -783) (undo-tree-id1015 . -783) (undo-tree-id1016 . -783) (undo-tree-id1017 . -783) (undo-tree-id1018 . -783) (undo-tree-id1019 . -783) (undo-tree-id1020 . -783) (undo-tree-id1021 . -783) (undo-tree-id1022 . -783) (undo-tree-id1023 . -783) (undo-tree-id1024 . -783) (undo-tree-id1025 . -783) (undo-tree-id1026 . -745) (undo-tree-id1027 . -745) (undo-tree-id1028 . -745) (undo-tree-id1029 . -745) (undo-tree-id1030 . -745) (undo-tree-id1031 . -745) (undo-tree-id1032 . -745) (undo-tree-id1033 . -745) (undo-tree-id1034 . -745) (undo-tree-id1035 . -745) (undo-tree-id1036 . -745) (undo-tree-id1037 . -745) (undo-tree-id1038 . -745) (undo-tree-id1039 . -745) (undo-tree-id1040 . -745) (undo-tree-id1041 . -745) (undo-tree-id1042 . -745) (undo-tree-id1043 . -745) (undo-tree-id1044 . -745) (undo-tree-id1045 . -745) (undo-tree-id1046 . -745) (undo-tree-id1047 . -745) (undo-tree-id1048 . -745) (undo-tree-id1049 . -745) (undo-tree-id1050 . -745) (undo-tree-id1051 . -783) 24218 (t 26712 16101 893315 129000)) nil (26712 16133 806452 66000) 0 nil])
([nil nil ((23874 . 23875) (t 26712 16133 809143 486000) 23854) nil (26712 16144 787095 217000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23874 . 23875) (#("
" 0 1 (fontified nil)) . -24657) (23874 . 24658) 23854) nil (26712 16144 787094 586000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23875) (undo-tree-id1052 . -1)) nil (26712 16144 787091 881000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . 25546) (t 26712 16144 790084 400000) (25547 . 25548) 25546 (t 26712 16144 790084 400000)) nil (26712 16166 887515 28000) 0 nil])
([nil nil ((nil fontified t 25546 . 25547) (#("7" 0 1 (fontified t)) . 25546) (25547 . 25548) 25546) nil (26712 16169 977175 388000) 0 nil])
([nil nil ((#("\\href{mailto:" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 13 (face tex-verbatim fontified t)) . 736) (undo-tree-id8 . -12) (t 26712 55164 244309 929000)) nil (26714 13363 767378 151000) 0 nil] [nil nil ((#("8" 0 1 (fontified t)) . 26652) (26653 . 26654) 26652) ((#("7" 0 1 (fontified nil)) . 26653) (26652 . 26653)) (26712 16169 830128 701000) 0 nil])
([nil nil ((#("}{\\nolinkurl{assem.dauletkaliyeva1@gmail.com}}" 0 2 (fontified t) 2 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 44 (face tex-verbatim fontified t) 44 46 (fontified t)) . 767) (undo-tree-id7 . -45)) nil (26714 13363 767377 470000) 0 nil])
([nil nil ((nil fontified t 26652 . 26653) (#("7" 0 1 (fontified t)) . 26652) (26653 . 26654) 26652) ((#("6" 0 1 (fontified nil)) . 26653) (26652 . 26653) (t 26712 16166 890965 432000)) (26712 16166 887509 178000) 0 nil])
([nil nil ((735 . 736) (#("
" 0 1 (fontified t)) . -735) 704) nil (26714 13363 767376 909000) 0 nil])
nil
([nil nil ((#("\\href{mailto:" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 13 (face tex-verbatim fontified t)) . 2475) (undo-tree-id6 . -12)) nil (26714 13363 767376 598000) 0 nil])
([nil nil ((#("}{\\nolinkurl{assem.dauletkaliyeva1@gmail.com}}" 0 2 (fontified t) 2 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 44 (face tex-verbatim fontified t) 44 46 (fontified t)) . 2506) (undo-tree-id5 . -45)) nil (26714 13363 767375 436000) 0 nil])
([nil nil ((#("\\href{mailto:" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 13 (face tex-verbatim fontified t)) . 4249) (undo-tree-id3 . -12) (undo-tree-id4 . -13)) nil (26714 13363 767374 494000) 0 nil])
([nil nil ((#("}{\\nolinkurl{assem.dauletkaliyeva1@gmail.com}}" 0 2 (fontified t) 2 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 44 (face tex-verbatim fontified t) 44 46 (fontified t)) . 4280) (undo-tree-id0 . -45) (undo-tree-id1 . -46) (undo-tree-id2 . -46)) nil (26714 13363 767366 238000) 0 nil])
([nil nil ((#("\\href{mailto:" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 13 (face tex-verbatim fontified t)) . 35489) (undo-tree-id98 . -12) (t 26714 13363 769967 544000)) nil (26714 13384 152450 649000) 0 nil])
([nil nil ((#("\\href{mailto:" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 13 (face tex-verbatim fontified t)) . 34606) (undo-tree-id96 . -12) (undo-tree-id97 . -13)) nil (26714 13384 152449 868000) 0 nil])
([nil nil ((#("\\href{mailto:" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 13 (face tex-verbatim fontified t)) . 33891) (undo-tree-id94 . -12) (undo-tree-id95 . -13)) nil (26714 13384 152449 176000) 0 nil])
([nil nil ((#("\\href{mailto:" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 13 (face tex-verbatim fontified t)) . 33511) (undo-tree-id92 . -12) (undo-tree-id93 . -13)) nil (26714 13384 152448 265000) 0 nil])
([nil nil ((#("}{\\nolinkurl{assem.dauletkaliyeva1@gmail.com}}" 0 2 (fontified t) 2 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 44 (face tex-verbatim fontified t) 44 46 (fontified t)) . 33542) (undo-tree-id90 . -45) (undo-tree-id91 . -46)) nil (26714 13384 152447 72000) 0 nil])
([nil nil ((#("}{\\nolinkurl{ayzhan.nazyrova@gmail.com}}" 0 2 (fontified t) 2 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 38 (face tex-verbatim fontified t) 38 40 (fontified t)) . 33857) (undo-tree-id89 . -39)) nil (26714 13384 152446 131000) 0 nil])
([nil nil ((#("}{\\nolinkurl{assem.dauletkaliyeva1@gmail.com}}" 0 2 (fontified t) 2 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 44 (face tex-verbatim fontified t) 44 46 (fontified t)) . 34525) (undo-tree-id88 . -45)) nil (26714 13384 152445 509000) 0 nil])
([nil nil ((#("}{\\nolinkurl{buribayeva@mail.ru}}.\\" 0 2 (fontified t) 2 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 31 (face tex-verbatim fontified t) 31 35 (fontified t)) . 35336) (undo-tree-id9 . -34) (undo-tree-id10 . -13) (undo-tree-id11 . -13) (undo-tree-id12 . -13) (undo-tree-id13 . -13) (undo-tree-id14 . -13) (undo-tree-id15 . -13) (undo-tree-id16 . -13) (undo-tree-id17 . -13) (undo-tree-id18 . -13) (undo-tree-id19 . -13) (undo-tree-id20 . -13) (undo-tree-id21 . -12) (undo-tree-id22 . -12) (undo-tree-id23 . -12) (undo-tree-id24 . -12) (undo-tree-id25 . -12) (undo-tree-id26 . -12) (undo-tree-id27 . -12) (undo-tree-id28 . -12) (undo-tree-id29 . -12) (undo-tree-id30 . -12) (undo-tree-id31 . -11) (undo-tree-id32 . -11) (undo-tree-id33 . -11) (undo-tree-id34 . -11) (undo-tree-id35 . -11) (undo-tree-id36 . -10) (undo-tree-id37 . -10) (undo-tree-id38 . -10) (undo-tree-id39 . -10) (undo-tree-id40 . -10) (undo-tree-id41 . -9) (undo-tree-id42 . -9) (undo-tree-id43 . -9) (undo-tree-id44 . -9) (undo-tree-id45 . -9) (undo-tree-id46 . -8) (undo-tree-id47 . -8) (undo-tree-id48 . -8) (undo-tree-id49 . -8) (undo-tree-id50 . -8) (undo-tree-id51 . -7) (undo-tree-id52 . -7) (undo-tree-id53 . -7) (undo-tree-id54 . -7) (undo-tree-id55 . -7) (undo-tree-id56 . -6) (undo-tree-id57 . -6) (undo-tree-id58 . -6) (undo-tree-id59 . -6) (undo-tree-id60 . -6) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -35) (undo-tree-id87 . -35)) nil (26714 13384 152443 466000) 0 nil])
([nil nil ((35336 . 35337)) nil (26714 13384 152374 736000) 0 nil])
([nil nil ((35317 . 35318) (#("
" 0 1 (fontified t)) . -35317) (undo-tree-id100 . -1) 35297 (t 26714 13384 155036 663000)) nil (26714 13391 20551 229000) 0 nil])
([nil nil ((33831 . 33832) (#("
" 0 1 (fontified t)) . -33831) (undo-tree-id99 . -1) 33830) nil (26714 13391 20547 271000) 0 nil])
([nil current ((33510 . 33511) (#("
" 0 1 (fontified t)) . -33510) (undo-tree-id101 . -1) 33509 (t 26714 13391 23059 625000)) nil (26714 13393 379362 512000) 0 nil])
nil
