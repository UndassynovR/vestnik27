(undo-tree-save-format-version . 1)
"e76c01364a48b181257bc6c3f7bb6088e0a7f37f"
[nil nil nil nil (26716 22059 311036 151000) 0 nil]
([nil nil ((374 . 419)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374) (undo-tree-id4 . -44) (undo-tree-id5 . -44) (undo-tree-id6 . -44) (undo-tree-id7 . -44) (undo-tree-id8 . -44) (undo-tree-id9 . -44) (undo-tree-id10 . -44) (undo-tree-id11 . -44) (undo-tree-id12 . -44) (undo-tree-id13 . -44) (undo-tree-id14 . -44) (undo-tree-id15 . -44) (undo-tree-id16 . -44) (undo-tree-id17 . -44) (undo-tree-id18 . -44) (undo-tree-id19 . -44) (undo-tree-id20 . -44) (undo-tree-id21 . -44) (undo-tree-id22 . -44)) (26716 22061 579950 505000) 0 nil] [nil nil ((374 . 1845) 344 (t 26715 48619 482412 411000)) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
  \"Inserts a LaTeX \\\\alink{} link with the clipboard text at the appropriate position on the current line.\"
  (interactive)
  (let ((clipboard-text (gui-get-selection 'PRIMARY)))  ;; Get clipboard content
    (save-excursion
      (let ((line-end (line-end-position))
            (line-start (line-beginning-position))
            (backslash-positions '())
            (last-comma nil))
        ;; Find all backslash positions on the line
        (goto-char line-start)
        (while (search-forward \"\\\\\" line-end t)
          (push (1- (point)) backslash-positions))  ;; Store position before the backslash
        
        ;; Find last comma on the line
        (goto-char line-start)
        (while (search-forward \",\" line-end t)
          (setq last-comma (1- (point))))  ;; Position before the comma
        
        (cond
         ;; Check if there are at least 2 backslashes, use the second-to-last
         ((>= (length backslash-positions) 2)
          (goto-char (nth 1 (reverse backslash-positions)))  ;; Second-to-last backslash
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Check if there's a comma on the current line
         (last-comma
          (goto-char last-comma)
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Default: insert at end of line
         (t
          (goto-char line-end)
          (insert (format \"\\\\alink{%s}\" clipboard-text))))))))
}" 0 6 (face font-lock-keyword-face fontified t) 6 70 (fontified t) 70 72 (face font-lock-warning-face fontified t) 72 553 (fontified t) 553 555 (face font-lock-warning-face fontified t) 555 1121 (fontified t) 1121 1123 (face font-lock-warning-face fontified t) 1123 1129 (fontified t) 1129 1152 (face font-lock-comment-face fontified t) 1152 1290 (fontified t) 1290 1292 (face font-lock-warning-face fontified t) 1292 1298 (fontified t) 1298 1321 (face font-lock-comment-face fontified t) 1321 1434 (fontified t) 1434 1436 (face font-lock-warning-face fontified t) 1436 1442 (fontified t) 1442 1470 (face font-lock-comment-face fontified t) 1470 1471 (fontified t)) . 374)) (26716 21901 406467 318000) 0 nil] [nil nil ((374 . 1845) 344 (t 26715 48619 482412 411000)) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
  \"Inserts a LaTeX \\\\alink{} link with the clipboard text at the appropriate position on the current line.\"
  (interactive)
  (let ((clipboard-text (gui-get-selection 'PRIMARY)))  ;; Get clipboard content
    (save-excursion
      (let ((line-end (line-end-position))
            (line-start (line-beginning-position))
            (backslash-positions '())
            (last-comma nil))
        ;; Find all backslash positions on the line
        (goto-char line-start)
        (while (search-forward \"\\\\\" line-end t)
          (push (1- (point)) backslash-positions))  ;; Store position before the backslash
        
        ;; Find last comma on the line
        (goto-char line-start)
        (while (search-forward \",\" line-end t)
          (setq last-comma (1- (point))))  ;; Position before the comma
        
        (cond
         ;; Check if there are at least 2 backslashes, use the second-to-last
         ((>= (length backslash-positions) 2)
          (goto-char (nth 1 (reverse backslash-positions)))  ;; Second-to-last backslash
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Check if there's a comma on the current line
         (last-comma
          (goto-char last-comma)
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Default: insert at end of line
         (t
          (goto-char line-end)
          (insert (format \"\\\\alink{%s}\" clipboard-text))))))))
}" 0 6 (face font-lock-keyword-face fontified t) 6 70 (fontified t) 70 72 (face font-lock-warning-face fontified t) 72 553 (fontified t) 553 555 (face font-lock-warning-face fontified t) 555 1121 (fontified t) 1121 1123 (face font-lock-warning-face fontified t) 1123 1129 (fontified t) 1129 1152 (face font-lock-comment-face fontified t) 1152 1290 (fontified t) 1290 1292 (face font-lock-warning-face fontified t) 1292 1298 (fontified t) 1298 1321 (face font-lock-comment-face fontified t) 1321 1434 (fontified t) 1434 1436 (face font-lock-warning-face fontified t) 1436 1442 (fontified t) 1442 1470 (face font-lock-comment-face fontified t) 1470 1471 (fontified t)) . 374)) (26716 21883 713197 296000) 0 nil] [nil nil ((374 . 1845) 344 (t 26715 48619 482412 411000)) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
  \"Inserts a LaTeX \\\\alink{} link with the clipboard text at the appropriate position on the current line.\"
  (interactive)
  (let ((clipboard-text (gui-get-selection 'PRIMARY)))  ;; Get clipboard content
    (save-excursion
      (let ((line-end (line-end-position))
            (line-start (line-beginning-position))
            (backslash-positions '())
            (last-comma nil))
        ;; Find all backslash positions on the line
        (goto-char line-start)
        (while (search-forward \"\\\\\" line-end t)
          (push (1- (point)) backslash-positions))  ;; Store position before the backslash
        
        ;; Find last comma on the line
        (goto-char line-start)
        (while (search-forward \",\" line-end t)
          (setq last-comma (1- (point))))  ;; Position before the comma
        
        (cond
         ;; Check if there are at least 2 backslashes, use the second-to-last
         ((>= (length backslash-positions) 2)
          (goto-char (nth 1 (reverse backslash-positions)))  ;; Second-to-last backslash
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Check if there's a comma on the current line
         (last-comma
          (goto-char last-comma)
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Default: insert at end of line
         (t
          (goto-char line-end)
          (insert (format \"\\\\alink{%s}\" clipboard-text))))))))
}" 0 6 (face font-lock-keyword-face fontified t) 6 70 (fontified t) 70 72 (face font-lock-warning-face fontified t) 72 553 (fontified t) 553 555 (face font-lock-warning-face fontified t) 555 1121 (fontified t) 1121 1123 (face font-lock-warning-face fontified t) 1123 1129 (fontified t) 1129 1152 (face font-lock-comment-face fontified t) 1152 1290 (fontified t) 1290 1292 (face font-lock-warning-face fontified t) 1292 1298 (fontified t) 1298 1321 (face font-lock-comment-face fontified t) 1321 1434 (fontified t) 1434 1436 (face font-lock-warning-face fontified t) 1436 1442 (fontified t) 1442 1470 (face font-lock-comment-face fontified t) 1470 1471 (fontified t)) . 374)) (26716 21881 788261 196000) 0 nil] [nil nil ((374 . 419) 344 (t 26715 48619 482412 411000)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374)) (26716 21727 89816 192000) 0 nil] [nil nil ((374 . 419) 344 (t 26715 48619 482412 411000)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374)) (26716 21724 562197 226000) 0 nil] [nil nil ((374 . 419) 344 (t 26715 48619 482412 411000)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374)) (26716 21511 875487 435000) 0 nil] [nil nil ((374 . 419) 344 (t 26715 48619 482412 411000)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374)) (26716 21506 646907 453000) 0 nil])
([nil nil ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374) (undo-tree-id23 . -44) (undo-tree-id24 . -44) (undo-tree-id25 . -44) (undo-tree-id26 . -44) (undo-tree-id27 . -44) (undo-tree-id28 . -44) (undo-tree-id29 . -44) (undo-tree-id30 . -44) (undo-tree-id31 . -44) (undo-tree-id32 . -44) (undo-tree-id33 . -44) (undo-tree-id34 . -44) (undo-tree-id35 . -44) (undo-tree-id36 . -44) (undo-tree-id37 . -44) (undo-tree-id38 . -44) (undo-tree-id39 . -44)) ((374 . 419)) (26716 22061 773051 991000) 0 nil])
nil
nil
nil
nil
nil
nil
nil
([nil nil ((357 . 402)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 357)) (26716 22064 114333 356000) 0 nil] [nil nil ((357 . 402)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 357)) (26716 22051 296647 408000) 0 nil] [nil nil ((357 . 1740)) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
  \"Inserts a LaTeX \\\\alink{} link with the clipboard text before the second backslash (\\\\) on the current line, if there are at least two.\"
  (interactive)
  (let ((clipboard-text (gui-get-selection 'PRIMARY)))
    (save-excursion
      (let ((line-end (line-end-position))
            (line-start (line-beginning-position))
            (backslash-positions '())
            (last-comma nil))
        ;; Find all individual backslash positions on the line
        (goto-char line-start)
        (while (re-search-forward \"\\\\\\\\\" line-end t)
          (push (match-beginning 0) backslash-positions))
        
        ;; Find last comma on the line
        (goto-char line-start)
        (while (search-forward \",\" line-end t)
          (setq last-comma (1- (point))))

        (cond
         ;; If at least two backslashes found, insert before second one
         ((>= (length backslash-positions) 2)
          (goto-char (nth 1 (reverse backslash-positions)))
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Otherwise, use last comma if available
         (last-comma
          (goto-char last-comma)
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Otherwise, insert at end of line
         (t
          (goto-char line-end)
          (insert (format \"\\\\alink{%s}\" clipboard-text))))))))
}" 0 6 (face font-lock-keyword-face fontified t) 6 70 (fontified t) 70 72 (face font-lock-warning-face fontified t) 72 138 (fontified t) 138 140 (face font-lock-warning-face fontified t) 140 573 (fontified t) 573 575 (face font-lock-warning-face fontified t) 575 577 (face font-lock-warning-face fontified t) 577 1037 (fontified t) 1037 1039 (face font-lock-warning-face fontified t) 1039 1045 (fontified t) 1045 1068 (face font-lock-comment-face fontified t) 1068 1200 (fontified t) 1200 1202 (face font-lock-warning-face fontified t) 1202 1208 (fontified t) 1208 1231 (face font-lock-comment-face fontified t) 1231 1346 (fontified t) 1346 1348 (face font-lock-warning-face fontified t) 1348 1354 (fontified t) 1354 1382 (face font-lock-comment-face fontified t) 1382 1383 (fontified t)) . 357)) (26716 21980 403317 816000) 0 nil] [nil nil ((nil rear-nonsticky nil 401 . 402) (nil fontified nil 357 . 402) (357 . 402)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified nil) 6 44 (fontified nil) 44 45 (rear-nonsticky nil fontified nil)) . 357) (nil rear-nonsticky t 401 . 402)) (26716 21976 512860 831000) 0 nil])
([nil current ((445 . 490) 444) nil (26716 22070 503913 361000) 0 nil] [nil nil ((445 . 490)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 445)) (26716 22062 135940 481000) 0 nil])
([nil nil ((445 . 490) 444) ((#("\\alink{https://orcid.org/0009-0006-7802-9577}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 445) (t 26716 22012 41369 608000)) (26716 22012 39330 90000) 0 nil])
nil
nil
nil
nil
nil
