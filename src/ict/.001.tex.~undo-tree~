(undo-tree-save-format-version . 1)
"b84b271e10fb21f69201acf4c13dc6598e6bb9ca"
[nil nil nil nil (26716 22059 311036 151000) 0 nil]
([nil nil ((374 . 419)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374) (undo-tree-id4 . -44) (undo-tree-id5 . -44) (undo-tree-id6 . -44) (undo-tree-id7 . -44) (undo-tree-id8 . -44) (undo-tree-id9 . -44) (undo-tree-id10 . -44) (undo-tree-id11 . -44) (undo-tree-id12 . -44) (undo-tree-id13 . -44) (undo-tree-id14 . -44) (undo-tree-id15 . -44) (undo-tree-id16 . -44) (undo-tree-id17 . -44) (undo-tree-id18 . -44) (undo-tree-id19 . -44) (undo-tree-id20 . -44) (undo-tree-id21 . -44) (undo-tree-id22 . -44)) (26716 22061 579950 505000) 0 nil] [nil nil ((374 . 1845) 344 (t 26715 48619 482412 411000)) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
  \"Inserts a LaTeX \\\\alink{} link with the clipboard text at the appropriate position on the current line.\"
  (interactive)
  (let ((clipboard-text (gui-get-selection 'PRIMARY)))  ;; Get clipboard content
    (save-excursion
      (let ((line-end (line-end-position))
            (line-start (line-beginning-position))
            (backslash-positions '())
            (last-comma nil))
        ;; Find all backslash positions on the line
        (goto-char line-start)
        (while (search-forward \"\\\\\" line-end t)
          (push (1- (point)) backslash-positions))  ;; Store position before the backslash
        
        ;; Find last comma on the line
        (goto-char line-start)
        (while (search-forward \",\" line-end t)
          (setq last-comma (1- (point))))  ;; Position before the comma
        
        (cond
         ;; Check if there are at least 2 backslashes, use the second-to-last
         ((>= (length backslash-positions) 2)
          (goto-char (nth 1 (reverse backslash-positions)))  ;; Second-to-last backslash
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Check if there's a comma on the current line
         (last-comma
          (goto-char last-comma)
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Default: insert at end of line
         (t
          (goto-char line-end)
          (insert (format \"\\\\alink{%s}\" clipboard-text))))))))
}" 0 6 (face font-lock-keyword-face fontified t) 6 70 (fontified t) 70 72 (face font-lock-warning-face fontified t) 72 553 (fontified t) 553 555 (face font-lock-warning-face fontified t) 555 1121 (fontified t) 1121 1123 (face font-lock-warning-face fontified t) 1123 1129 (fontified t) 1129 1152 (face font-lock-comment-face fontified t) 1152 1290 (fontified t) 1290 1292 (face font-lock-warning-face fontified t) 1292 1298 (fontified t) 1298 1321 (face font-lock-comment-face fontified t) 1321 1434 (fontified t) 1434 1436 (face font-lock-warning-face fontified t) 1436 1442 (fontified t) 1442 1470 (face font-lock-comment-face fontified t) 1470 1471 (fontified t)) . 374)) (26716 21901 406467 318000) 0 nil] [nil nil ((374 . 1845) 344 (t 26715 48619 482412 411000)) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
  \"Inserts a LaTeX \\\\alink{} link with the clipboard text at the appropriate position on the current line.\"
  (interactive)
  (let ((clipboard-text (gui-get-selection 'PRIMARY)))  ;; Get clipboard content
    (save-excursion
      (let ((line-end (line-end-position))
            (line-start (line-beginning-position))
            (backslash-positions '())
            (last-comma nil))
        ;; Find all backslash positions on the line
        (goto-char line-start)
        (while (search-forward \"\\\\\" line-end t)
          (push (1- (point)) backslash-positions))  ;; Store position before the backslash
        
        ;; Find last comma on the line
        (goto-char line-start)
        (while (search-forward \",\" line-end t)
          (setq last-comma (1- (point))))  ;; Position before the comma
        
        (cond
         ;; Check if there are at least 2 backslashes, use the second-to-last
         ((>= (length backslash-positions) 2)
          (goto-char (nth 1 (reverse backslash-positions)))  ;; Second-to-last backslash
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Check if there's a comma on the current line
         (last-comma
          (goto-char last-comma)
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Default: insert at end of line
         (t
          (goto-char line-end)
          (insert (format \"\\\\alink{%s}\" clipboard-text))))))))
}" 0 6 (face font-lock-keyword-face fontified t) 6 70 (fontified t) 70 72 (face font-lock-warning-face fontified t) 72 553 (fontified t) 553 555 (face font-lock-warning-face fontified t) 555 1121 (fontified t) 1121 1123 (face font-lock-warning-face fontified t) 1123 1129 (fontified t) 1129 1152 (face font-lock-comment-face fontified t) 1152 1290 (fontified t) 1290 1292 (face font-lock-warning-face fontified t) 1292 1298 (fontified t) 1298 1321 (face font-lock-comment-face fontified t) 1321 1434 (fontified t) 1434 1436 (face font-lock-warning-face fontified t) 1436 1442 (fontified t) 1442 1470 (face font-lock-comment-face fontified t) 1470 1471 (fontified t)) . 374)) (26716 21883 713197 296000) 0 nil] [nil nil ((374 . 1845) 344 (t 26715 48619 482412 411000)) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
  \"Inserts a LaTeX \\\\alink{} link with the clipboard text at the appropriate position on the current line.\"
  (interactive)
  (let ((clipboard-text (gui-get-selection 'PRIMARY)))  ;; Get clipboard content
    (save-excursion
      (let ((line-end (line-end-position))
            (line-start (line-beginning-position))
            (backslash-positions '())
            (last-comma nil))
        ;; Find all backslash positions on the line
        (goto-char line-start)
        (while (search-forward \"\\\\\" line-end t)
          (push (1- (point)) backslash-positions))  ;; Store position before the backslash
        
        ;; Find last comma on the line
        (goto-char line-start)
        (while (search-forward \",\" line-end t)
          (setq last-comma (1- (point))))  ;; Position before the comma
        
        (cond
         ;; Check if there are at least 2 backslashes, use the second-to-last
         ((>= (length backslash-positions) 2)
          (goto-char (nth 1 (reverse backslash-positions)))  ;; Second-to-last backslash
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Check if there's a comma on the current line
         (last-comma
          (goto-char last-comma)
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Default: insert at end of line
         (t
          (goto-char line-end)
          (insert (format \"\\\\alink{%s}\" clipboard-text))))))))
}" 0 6 (face font-lock-keyword-face fontified t) 6 70 (fontified t) 70 72 (face font-lock-warning-face fontified t) 72 553 (fontified t) 553 555 (face font-lock-warning-face fontified t) 555 1121 (fontified t) 1121 1123 (face font-lock-warning-face fontified t) 1123 1129 (fontified t) 1129 1152 (face font-lock-comment-face fontified t) 1152 1290 (fontified t) 1290 1292 (face font-lock-warning-face fontified t) 1292 1298 (fontified t) 1298 1321 (face font-lock-comment-face fontified t) 1321 1434 (fontified t) 1434 1436 (face font-lock-warning-face fontified t) 1436 1442 (fontified t) 1442 1470 (face font-lock-comment-face fontified t) 1470 1471 (fontified t)) . 374)) (26716 21881 788261 196000) 0 nil] [nil nil ((374 . 419) 344 (t 26715 48619 482412 411000)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374)) (26716 21727 89816 192000) 0 nil] [nil nil ((374 . 419) 344 (t 26715 48619 482412 411000)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374)) (26716 21724 562197 226000) 0 nil] [nil nil ((374 . 419) 344 (t 26715 48619 482412 411000)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374)) (26716 21511 875487 435000) 0 nil] [nil nil ((374 . 419) 344 (t 26715 48619 482412 411000)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374)) (26716 21506 646907 453000) 0 nil])
([nil nil ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 374) (undo-tree-id23 . -44) (undo-tree-id24 . -44) (undo-tree-id25 . -44) (undo-tree-id26 . -44) (undo-tree-id27 . -44) (undo-tree-id28 . -44) (undo-tree-id29 . -44) (undo-tree-id30 . -44) (undo-tree-id31 . -44) (undo-tree-id32 . -44) (undo-tree-id33 . -44) (undo-tree-id34 . -44) (undo-tree-id35 . -44) (undo-tree-id36 . -44) (undo-tree-id37 . -44) (undo-tree-id38 . -44) (undo-tree-id39 . -44)) ((374 . 419)) (26716 22061 773051 991000) 0 nil])
nil
nil
nil
nil
nil
nil
nil
([nil nil ((357 . 402)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 357)) (26716 22064 114333 356000) 0 nil] [nil nil ((357 . 402)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 357)) (26716 22051 296647 408000) 0 nil] [nil nil ((357 . 1740)) ((#("\\alink{(defun latex-insert-alink-from-clipboard ()
  \"Inserts a LaTeX \\\\alink{} link with the clipboard text before the second backslash (\\\\) on the current line, if there are at least two.\"
  (interactive)
  (let ((clipboard-text (gui-get-selection 'PRIMARY)))
    (save-excursion
      (let ((line-end (line-end-position))
            (line-start (line-beginning-position))
            (backslash-positions '())
            (last-comma nil))
        ;; Find all individual backslash positions on the line
        (goto-char line-start)
        (while (re-search-forward \"\\\\\\\\\" line-end t)
          (push (match-beginning 0) backslash-positions))
        
        ;; Find last comma on the line
        (goto-char line-start)
        (while (search-forward \",\" line-end t)
          (setq last-comma (1- (point))))

        (cond
         ;; If at least two backslashes found, insert before second one
         ((>= (length backslash-positions) 2)
          (goto-char (nth 1 (reverse backslash-positions)))
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Otherwise, use last comma if available
         (last-comma
          (goto-char last-comma)
          (insert (format \"\\\\alink{%s}\" clipboard-text)))
         ;; Otherwise, insert at end of line
         (t
          (goto-char line-end)
          (insert (format \"\\\\alink{%s}\" clipboard-text))))))))
}" 0 6 (face font-lock-keyword-face fontified t) 6 70 (fontified t) 70 72 (face font-lock-warning-face fontified t) 72 138 (fontified t) 138 140 (face font-lock-warning-face fontified t) 140 573 (fontified t) 573 575 (face font-lock-warning-face fontified t) 575 577 (face font-lock-warning-face fontified t) 577 1037 (fontified t) 1037 1039 (face font-lock-warning-face fontified t) 1039 1045 (fontified t) 1045 1068 (face font-lock-comment-face fontified t) 1068 1200 (fontified t) 1200 1202 (face font-lock-warning-face fontified t) 1202 1208 (fontified t) 1208 1231 (face font-lock-comment-face fontified t) 1231 1346 (fontified t) 1346 1348 (face font-lock-warning-face fontified t) 1348 1354 (fontified t) 1354 1382 (face font-lock-comment-face fontified t) 1382 1383 (fontified t)) . 357)) (26716 21980 403317 816000) 0 nil] [nil nil ((nil rear-nonsticky nil 401 . 402) (nil fontified nil 357 . 402) (357 . 402)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified nil) 6 44 (fontified nil) 44 45 (rear-nonsticky nil fontified nil)) . 357) (nil rear-nonsticky t 401 . 402)) (26716 21976 512860 831000) 0 nil])
([nil nil ((445 . 490) 444) nil (26716 22070 503913 361000) 0 nil] [nil nil ((445 . 490)) ((#("\\alink{https://orcid.org/0000-0002-5723-6642}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 445)) (26716 22062 135940 481000) 0 nil])
([nil nil ((445 . 490) 444) ((#("\\alink{https://orcid.org/0009-0006-7802-9577}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 44 (fontified t foreign-selection nil) 44 45 (fontified t)) . 445) (t 26716 22012 41369 608000)) (26716 22012 39330 90000) 0 nil])
nil
nil
([nil nil ((32039 . 32040) (#("
" 0 1 (fontified t)) . -32039) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 32025 (t 26716 51261 441280 711000)) nil (26716 51772 187397 144000) 0 nil])
nil
nil
([nil nil ((32318 . 32319) (#("
" 0 1 (fontified t)) . -32318) (undo-tree-id2 . -1) 32317) nil (26716 51772 187388 387000) 0 nil])
([nil nil ((32556 . 32557) (#("
" 0 1 (fontified t)) . -32556) (undo-tree-id1 . -1) 32544) nil (26716 51772 187387 105000) 0 nil])
([nil nil ((32860 . 32861) (#("
" 0 1 (fontified t)) . -32860) 32859) nil (26716 51772 187385 272000) 0 nil])
([nil nil ((33144 . 33145) (#("
" 0 1 (fontified t)) . -33144) (undo-tree-id0 . -1) 33143) nil (26716 51772 187384 59000) 0 nil])
([nil nil ((33661 . 33662) (#("
" 0 1 (fontified t)) . -33661) 33660) nil (26716 51772 187356 959000) 0 nil])
([nil nil ((604 . 605) (t 26716 51772 189165 276000)) nil (26718 17384 793113 504000) 0 nil])
([nil nil ((2279 . 2280)) nil (26718 17385 823669 583000) 0 nil] [nil nil ((2224 . 2225)) ((#("," 0 1 (fontified t)) . 2224)) (26718 17384 793028 504000) 0 nil])
([nil nil ((23636 . 23637) (t 26718 17385 825104 983000)) nil (26718 17436 260583 502000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 28381 . 28382) (nil fontified nil 28368 . 28382) (28368 . 28382) (#("Благодарность" 0 13 (face (bold) fontified t)) . 28368) (undo-tree-id0 . -13) (undo-tree-id1 . -12) (undo-tree-id2 . -13) (undo-tree-id3 . -13) (undo-tree-id4 . -13) (undo-tree-id5 . -13) (undo-tree-id6 . -13) (undo-tree-id7 . -13) (undo-tree-id8 . -13) (undo-tree-id9 . -13) (undo-tree-id10 . -13) (undo-tree-id11 . -13) (undo-tree-id12 . -13) (undo-tree-id13 . -13) (undo-tree-id14 . -13) (undo-tree-id15 . -13) (undo-tree-id16 . -13) (undo-tree-id17 . -13) (undo-tree-id18 . -13) (undo-tree-id19 . -13) (undo-tree-id20 . -13) (undo-tree-id21 . -13) (undo-tree-id22 . -12) (undo-tree-id23 . -12) (undo-tree-id24 . -12) (undo-tree-id25 . -12) (undo-tree-id26 . -12) (undo-tree-id27 . -12) (undo-tree-id28 . -12) (undo-tree-id29 . -12) (undo-tree-id30 . -12) (undo-tree-id31 . -12) (undo-tree-id32 . -12) (undo-tree-id33 . -12) (undo-tree-id34 . -12) (undo-tree-id35 . -12) (undo-tree-id36 . -12) (undo-tree-id37 . -12) (undo-tree-id38 . -12) (undo-tree-id39 . -12) (undo-tree-id40 . -12) (undo-tree-id41 . -12) (undo-tree-id42 . -12) (undo-tree-id43 . -13) (undo-tree-id44 . -13) (undo-tree-id45 . -12) 28381 (t 26718 17436 261596 588000)) nil (26718 17461 656090 109000) 0 nil])
([nil nil ((28877 . 28878) (#("
" 0 1 (fontified t)) . -28877) (undo-tree-id48 . -1) 28867 (t 26718 17461 658835 479000)) nil (26718 17486 522190 939000) 0 nil])
([nil nil ((28920 . 28924)) nil (26718 17514 738845 450000) 0 nil] [nil nil ((#("10.1093/ce/zkac023" 0 18 (face tex-verbatim fontified t)) . 28900) (undo-tree-id46 . -17) (undo-tree-id47 . -18)) ((28900 . 28918)) (26718 17486 522091 973000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28941 . 28942) (nil fontified nil 28924 . 28942) (28924 . 28942) 28923) nil (26718 17514 738845 190000) 0 nil])
nil
([nil nil ((29160 . 29161) (#("
" 0 1 (fontified t)) . -29160) (undo-tree-id51 . -1) 29159) nil (26718 17514 738844 679000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29238 . 29239) (nil fontified nil 29212 . 29239) (29212 . 29239)) nil (26718 17514 738843 627000) 0 nil])
([nil nil ((29212 . 29216)) nil (26718 17514 738843 296000) 0 nil])
([nil nil ((29411 . 29412) (#("
" 0 1 (fontified t)) . -29411) 29410) nil (26718 17514 738944 26000) 0 nil])
([nil nil ((29465 . 29469)) nil (26718 17518 275526 991000) 0 nil] [nil nil ((#("10.1016/j.jclepro.2021.126775" 0 29 (face tex-verbatim fontified t)) . 29434) (undo-tree-id49 . -28) (undo-tree-id50 . -29)) ((29434 . 29463)) (26718 17514 738839 770000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29497 . 29498) (nil fontified nil 29469 . 29498) (29469 . 29498) 29468) nil (26718 17518 275522 482000) 0 nil])
nil
([nil nil ((29729 . 29730) (#("
" 0 1 (fontified t)) . -29729) 29715 (t 26718 17518 278348 900000)) nil (26718 17523 507679 956000) 0 nil])
([nil nil ((29771 . 29775)) nil (26718 17530 450892 571000) 0 nil] [nil nil ((#("10.3390/a15100365}" 0 13 (face tex-verbatim fontified t) 13 17 (face tex-verbatim fontified t) 17 18 (fontified t)) . 29752) (undo-tree-id52 . -17) (undo-tree-id53 . -18)) ((29752 . 29770)) (26718 17523 507576 300000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29792 . 29793) (nil fontified nil 29775 . 29793) (29775 . 29793) 29774) nil (26718 17530 450892 60000) 0 nil])
nil
([nil nil ((30017 . 30018) (#("
" 0 1 (fontified t)) . -30017) 30016) nil (26718 17530 450991 347000) 0 nil])
([nil nil ((30070 . 30074)) nil (26718 17581 454336 284000) 0 nil] [nil nil ((#("10.1371/journal.pone.0293613" 0 28 (face tex-verbatim fontified t)) . 30040) (undo-tree-id54 . -27) (undo-tree-id55 . -28)) ((30040 . 30068)) (26718 17530 450888 733000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30101 . 30102) (nil fontified nil 30074 . 30102) (30074 . 30102) 30073) nil (26718 17581 454336 94000) 0 nil])
nil
([nil nil ((30367 . 30371)) nil (26718 17581 454335 623000) 0 nil])
([nil nil ((30605 . 30609)) nil (26718 17581 454335 382000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30638 . 30639) (nil fontified nil 30609 . 30639) (30609 . 30639) 30608) nil (26718 17581 454335 62000) 0 nil])
([nil nil ((31132 . 31136) (#("d" 0 1 (fontified t)) . -31132) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("O" 0 1 (fontified t)) . -31133) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("I" 0 1 (fontified t)) . -31134) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 31135 (31132 . 31135)) nil (26718 17581 454334 250000) 0 nil])
([nil nil ((nil rear-nonsticky nil 31161 . 31162) (nil fontified nil 31136 . 31162) (31136 . 31162) 31135) nil (26718 17581 454330 503000) 0 nil])
([nil nil ((31423 . 31425) (31421 . 31423)) nil (26718 17581 454330 132000) 0 nil])
([nil nil ((nil rear-nonsticky nil 31458 . 31459) (nil fontified nil 31425 . 31459) (31425 . 31459) 31424) nil (26718 17581 454329 782000) 0 nil])
([nil nil ((31677 . 31681) (#("d" 0 1 (fontified t)) . -31677) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("O" 0 1 (fontified t)) . -31678) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("I" 0 1 (fontified t)) . -31679) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#(" " 0 1 (fontified t)) . -31680) (undo-tree-id65 . -1) 31681 (31677 . 31681)) nil (26718 17581 454328 419000) 0 nil])
([nil nil ((nil rear-nonsticky nil 31704 . 31705) (nil fontified nil 31681 . 31705) (31681 . 31705) 31680) nil (26718 17581 454312 910000) 0 nil])
([nil nil ((31880 . 31884) (t 26718 17581 456893 375000)) nil (26718 17597 290079 254000) 0 nil])
([nil nil ((nil rear-nonsticky nil 31910 . 31911) (nil fontified nil 31884 . 31911) (31884 . 31911) 31883) nil (26718 17597 290078 653000) 0 nil])
([nil nil ((32077 . 32081) (#("d" 0 1 (fontified t)) . -32077) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("O" 0 1 (fontified t)) . -32078) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("I" 0 1 (fontified t)) . -32079) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 32080 (32077 . 32080)) nil (26718 17597 290075 36000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 29793) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (t 26718 17597 292025 544000)) nil (26718 17623 743778 355000) 0 nil])
([nil nil ((31908 . 31909) (t 26718 17623 747242 774000)) nil (26718 17652 203139 83000) 0 nil])
([nil nil ((nil fontified nil 12384 . 12392) (nil face (subscript) 12384 . 12392) (12384 . 12392) (#("к" 0 1 (face (subscript) display (raise -0.2) fontified t)) . -12384) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) 12385 (t 26718 17652 204471 664000)) nil (26718 17689 590596 788000) 0 nil])
([nil nil ((nil fontified nil 12345 . 12353) (nil face (subscript) 12345 . 12353) (12345 . 12353) (#("п" 0 1 (face (subscript) display (raise -0.2) fontified t)) . -12345) 12346) nil (26718 17689 590734 147000) 0 nil])
([nil nil ((#("
\\begin{center}
{\\bfseries References}
\\end{center}

\\begin{references}
1. Maka A. O. M., Alabid J. M. Solar energy technology and its roles in
sustainable development //Clean Energy. -- 2022. -- Vol.6. -- №.3.
-- pp.476-483. \\href{https://doi.org/10.1093/ce/zkac023}{https://doi.org}

2. Rajesh T. et al. Design and implementation of an automatic solar
tracking system for a monocrystalline silicon material panel using
MPPT algorithm //Materials Today: Proceedings. -- 2021. -- Vol.45. --
pp.1783-1789. \\href{https://doi.org/10.1016/j.matpr.2020.08.635}{https://doi.org}

3. Rizzo S. A., Scelba G. A hybrid global MPPT searching method for fast
variable shading conditions //Journal of Cleaner Production. -- 2021.
-- Vol.298. -- pp.126775. \\href{https://doi.org/10.1016/j.jclepro.2021.126775}{https://doi.org}

4. Bhukya L., Kedika N. R., Salkuti S. R. Enhanced maximum power point
techniques for solar photovoltaic system under uniform insolation and
partial shading conditions: a review //Algorithms. -- 2022. -- Vol.
15. -- №.10. -- pp.365. \\href{https://doi.org/10.3390/a15100365}{https://doi.org}

5. Ibrahim N. F. et al. A new adaptive MPPT technique using an improved
INC algorithm supported by fuzzy self-tuning controller for a
grid-linked photovoltaic system //Plos one. -- 2023. -- Vol.18. -- №.
11. -- pp. e0293613. \\href{https://doi.org/10.1371/journal.pone.0293613}{https://doi.org}

6. Bouguerra K., Latreche S., Khemliche M. Comparative Study betwenn
P\\&O, IncCond and MSC \\\\algorithms for MPPT Control of PV systeme
//2023 International Conference on Electrical Engineering and Advanced
Technology (ICEEAT). -- IEEE, 2023. -- Vol.1. -- pp.1-6.\\\\
10.1109/ICEEAT60471.2023.10425855

7. Şenpinar A., Cebeci M. Evaluation of power output for fixed and
two-axis tracking PVarrays //Applied Energy. -- 2012. -- Vol.92. --
pp.677-685. \\href{https://doi.org/10.1016/j.apenergy.2011.07.043}{https://doi.org}

8. Abdulkadir M., Samosir A. S., Yatim A. H. M. Modelling and simulation
of maximum power point tracking of photovoltaic system in Simulink
model //2012 IEEE International Conference on Power and Energy
(PECon). -- IEEE, 2012. -- pp.325-330.10.1109/PECon.2012.6450231

9. Mohapatra A. et al. A review on MPPT techniques of PV system under
partial shading condition //Renewable and Sustainable Energy Reviews.
-- 2017. -- Vol.80. -- pp.854-867.
\\href{https://doi.org/10.1016/j.rser.2017.05.083}{https://doi.org}

10. Lazaroiu G. C. et al. Comparative analysis of fixed and sun
tracking low power PV systems considering energy consumption //Energy
Conversion and Management. -- 2015. -- Vol.92. -- pp.143-148.

11. \\href{https://doi.org/10.1016/j.enconman.2014.12.046\\%20}{https://doi.org}
Pulido-Mancebo J. S. et al. Spatial distribution model of solar
radiation for agrivoltaic land use in fixed PV plants //Agronomy. --
2022. -- Vol.12. -- №.11. -- pp.2799.
\\href{https://doi.org/10.3390/agronomy12112799}{https://doi.org}

12. MacFarland T. W. et al. Student's t-test for independent samples
//Using R for Biostatistics. -- 2021. -- С.141-240.
\\href{https://doi.org/10.1007/978-3-030-62404-0_3}{https://doi.org}

13. Zhang G. et al. Fast and robust spectrum sensing via
Kolmogorov-Smirnov test //IEEE Transactions on Communications. --
2010. -- Vol.58. -- №.12. -- pp.3410-3416.
10.1109/TCOMM.2010.11.090209
\\end{references}
" 0 1 (fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t latex-env-pair t) 8 14 (face font-lock-function-name-face fontified t latex-env-pair t) 14 15 (fontified t latex-env-pair t) 15 17 (fontified t) 17 26 (face font-lock-keyword-face fontified t) 26 37 (face (bold) fontified t) 37 39 (fontified t) 39 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t latex-env-pair t) 44 50 (face font-lock-function-name-face fontified t latex-env-pair t) 50 51 (fontified t latex-env-pair t) 51 52 (fontified t) 52 53 (fontified t) 53 59 (face font-lock-keyword-face fontified t) 59 60 (fontified t latex-env-pair t) 60 70 (face font-lock-function-name-face fontified t latex-env-pair t) 70 71 (fontified t latex-env-pair t) 71 88 (fontified t) 88 144 (fontified t) 144 145 (fontified t) 145 211 (fontified t) 211 226 (fontified t) 226 231 (face font-lock-keyword-face fontified t) 231 232 (fontified t) 232 266 (face tex-verbatim fontified t) 266 491 (fontified t) 491 505 (fontified t) 505 510 (face font-lock-keyword-face fontified t) 510 511 (fontified t) 511 554 (face tex-verbatim fontified t) 554 585 (fontified t) 585 638 (fontified t) 638 647 (fontified t) 647 672 (fontified t) 672 717 (fontified t) 717 743 (fontified t) 743 748 (face font-lock-keyword-face fontified t) 748 749 (fontified t) 749 794 (face tex-verbatim fontified t) 794 813 (fontified t) 813 832 (fontified t) 832 885 (fontified t) 885 897 (fontified t) 897 955 (fontified t) 955 1047 (fontified t) 1047 1052 (face font-lock-keyword-face fontified t) 1052 1053 (fontified t) 1053 1064 (face tex-verbatim fontified t) 1064 1086 (face tex-verbatim fontified t) 1086 1105 (fontified t) 1105 1106 (fontified t) 1106 1115 (fontified t) 1115 1178 (fontified t) 1178 1201 (fontified t) 1201 1236 (fontified t) 1236 1240 (fontified t) 1240 1286 (fontified t) 1286 1290 (fontified t) 1290 1310 (fontified t) 1310 1331 (fontified t) 1331 1336 (face font-lock-keyword-face fontified t) 1336 1337 (fontified t) 1337 1381 (face tex-verbatim fontified t) 1381 1400 (fontified t) 1400 1453 (fontified t) 1453 1470 (fontified t) 1470 1471 (fontified t) 1471 1473 (face font-lock-keyword-face fontified t) 1473 1483 (fontified t) 1483 1492 (fontified t) 1492 1494 (face font-lock-warning-face fontified t) 1494 1536 (fontified t) 1536 1663 (fontified t) 1663 1665 (face font-lock-warning-face fontified t) 1665 1666 (fontified t) 1666 1848 (fontified t) 1848 1853 (face font-lock-keyword-face fontified t) 1853 1854 (fontified t) 1854 1900 (face tex-verbatim fontified t) 1900 1919 (fontified t) 1919 2123 (fontified t) 2123 2364 (fontified t) 2364 2369 (face font-lock-keyword-face fontified t) 2369 2370 (fontified t) 2370 2412 (face tex-verbatim fontified t) 2412 2431 (fontified t) 2431 2628 (fontified t) 2628 2633 (fontified t) 2633 2638 (face font-lock-keyword-face fontified t) 2638 2639 (fontified t) 2639 2689 (face tex-verbatim fontified t) 2689 2879 (fontified t) 2879 2884 (face font-lock-keyword-face fontified t) 2884 2885 (fontified t) 2885 2925 (face tex-verbatim fontified t) 2925 3066 (fontified t) 3066 3071 (face font-lock-keyword-face fontified t) 3071 3072 (fontified t) 3072 3115 (face tex-verbatim fontified t) 3115 3135 (fontified t) 3135 3330 (fontified t) 3330 3334 (face font-lock-keyword-face fontified t) 3334 3335 (fontified t latex-env-pair t) 3335 3345 (face font-lock-function-name-face fontified t latex-env-pair t) 3345 3346 (fontified t latex-env-pair t) 3346 3347 (fontified t)) . 32141) (undo-tree-id104 . -3330) (undo-tree-id105 . -3330) (undo-tree-id106 . -3346) (undo-tree-id107 . -3330) (undo-tree-id108 . -3134) (undo-tree-id109 . -2944) (undo-tree-id110 . -2628) (undo-tree-id111 . -2431) (undo-tree-id112 . -2188) (undo-tree-id113 . -1919) (undo-tree-id114 . -1700) (undo-tree-id115 . -1400) (undo-tree-id116 . -1400) (undo-tree-id117 . -1400) (undo-tree-id118 . -1400) (undo-tree-id119 . -1400) (undo-tree-id120 . -1400) (undo-tree-id121 . -1400) (undo-tree-id122 . -1400) (undo-tree-id123 . -1400) (undo-tree-id124 . -1400) (undo-tree-id125 . -1400) (undo-tree-id126 . -1400) (undo-tree-id127 . -1400) (undo-tree-id128 . -1400) (undo-tree-id129 . -1400) (undo-tree-id130 . -1105) (undo-tree-id131 . -1105) (undo-tree-id132 . -1105) (undo-tree-id133 . -1105) (undo-tree-id134 . -1105) (undo-tree-id135 . -1105) (undo-tree-id136 . -1105) (undo-tree-id137 . -813) (undo-tree-id138 . -813) (undo-tree-id139 . -813) (undo-tree-id140 . -813) (undo-tree-id141 . -813) (undo-tree-id142 . -813) (undo-tree-id143 . -813) (undo-tree-id144 . -813) (undo-tree-id145 . -813) (undo-tree-id146 . -813) (undo-tree-id147 . -813) (undo-tree-id148 . -813) (undo-tree-id149 . -813) (undo-tree-id150 . -813) (undo-tree-id151 . -813) (undo-tree-id152 . -813) (undo-tree-id153 . -813) (undo-tree-id154 . -573) (undo-tree-id155 . -573) (undo-tree-id156 . -573) (undo-tree-id157 . -573) (undo-tree-id158 . -573) (undo-tree-id159 . -573) (undo-tree-id160 . -573) (undo-tree-id161 . -573) (undo-tree-id162 . -573) (undo-tree-id163 . -573) (undo-tree-id164 . -573) (undo-tree-id165 . -573) (undo-tree-id166 . -573) (undo-tree-id167 . -573) (undo-tree-id168 . -573) (undo-tree-id169 . -573) (undo-tree-id170 . -573) (undo-tree-id171 . -285) (undo-tree-id172 . -285) (undo-tree-id173 . -285) (undo-tree-id174 . -285) (undo-tree-id175 . -285) (undo-tree-id176 . -285) (undo-tree-id177 . -285) (undo-tree-id178 . -285) (undo-tree-id179 . -285) (undo-tree-id180 . -285) (undo-tree-id181 . -285) (undo-tree-id182 . -285) (undo-tree-id183 . -285) (undo-tree-id184 . -285) (undo-tree-id185 . -285) (undo-tree-id186 . -285) (undo-tree-id187 . -285) (undo-tree-id188 . -53) (undo-tree-id189 . -53) (undo-tree-id190 . -53) (undo-tree-id191 . -53) (undo-tree-id192 . -53) (undo-tree-id193 . -53) (undo-tree-id194 . -53) (undo-tree-id195 . -53) (undo-tree-id196 . -53) (undo-tree-id197 . -53) (undo-tree-id198 . -53) (undo-tree-id199 . -53) (undo-tree-id200 . -53) (undo-tree-id201 . -53) (undo-tree-id202 . -53) (undo-tree-id203 . -53) (undo-tree-id204 . -53) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -3347) (t 26718 17690 275770 576000)) nil (26718 17790 638387 926000) 0 nil] [nil nil ((nil fontified nil 12196 . 12204) (nil face (subscript) 12196 . 12204) (12196 . 12204) (#("к" 0 1 (face (subscript) display (raise -0.2) fontified t)) . -12196) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) 12197) ((12196 . 12197) (#("\\text{к}" 0 5 (display (raise -0.2) face (subscript) fontified nil) 5 8 (face (subscript) display (raise -0.2) fontified nil)) . 12196) (undo-tree-id99 . -7) (undo-tree-id100 . -7) (undo-tree-id101 . -7) (undo-tree-id102 . -7) (undo-tree-id103 . -7) (nil face (subscript) 12201 . 12204) (nil face (font-lock-keyword-face subscript) 12196 . 12201) (nil fontified t 12201 . 12204) (nil fontified t 12196 . 12201)) (26718 17689 590590 827000) 0 nil])
([nil nil ((nil rear-nonsticky nil 32829 . 32830) (nil fontified nil 32200 . 32830) (32200 . 32830) (t 26718 17790 640522 586000)) nil (26718 17874 667134 798000) 0 nil])
nil
([nil nil ((#("	Information about the authors
" 0 31 (fontified t)) . 32512) (undo-tree-id318 . -30) (undo-tree-id319 . -31) (undo-tree-id320 . -31) (undo-tree-id321 . -31) (undo-tree-id322 . -31) (undo-tree-id323 . -31) (undo-tree-id324 . -31) (undo-tree-id325 . -31) (undo-tree-id326 . -31) (undo-tree-id327 . -31) (undo-tree-id328 . -31) (undo-tree-id329 . -31) (undo-tree-id330 . -31) (undo-tree-id331 . -31) (undo-tree-id332 . -31) (undo-tree-id333 . -31) (undo-tree-id334 . -31)) nil (26718 17874 667134 36000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32512)) nil (26718 17874 667129 287000) 0 nil])
([nil nil ((#("
Құттыбай Нұржігіт Бақытұлы, и.о. доцент, PhD, Казахский Национальный
Университет им. аль-Фараби, физико - технический факультет, кафедра физики
твердого тела и нелинейной физики, Алматы, 050038, Республика Казахстан,
e-mail: Nurjigit.10.93@gmail.com;

Байболов Олжас Бауыржанович, магистрант, 1 курс, Казахский Национальный
Университет имени аль-Фараби, Алматы, 050038, Республика Казахстан,
e-mail: baibolov\\_olzhas2@kaznu.kz;
" 0 1 (fontified t) 1 409 (fontified t) 409 411 (face font-lock-keyword-face fontified t) 411 429 (fontified t)) . 32798) (undo-tree-id310 . -393) (undo-tree-id311 . -393) (undo-tree-id312 . -428) (undo-tree-id313 . -393) (undo-tree-id314 . -393) (undo-tree-id315 . -252) (undo-tree-id316 . -252) (undo-tree-id317 . -393) 33191) nil (26718 17874 667128 716000) 0 nil])
([nil nil ((#("Kuttybay Nurzhigit, acting associate professor, PhD, Kazakh National
University named after аl-Farabi, Faculty of Physics and Technology,
Department of Solid State and Nonlinear Physics, Almaty, 050038,
Republic of Kazakhstan, e-mail: \\\\Nurjigit.10.93@gmail.com;

Baibolov Olzhas, Master' s student, 1st year, Al-Farabi
Kazakh National University, Almaty, 050038, Republic of Kazakhstan,
e-mail: baibolov\\_olzhas2@kaznu.kz.
" 0 235 (fontified t) 235 237 (face font-lock-warning-face fontified t) 237 404 (fontified t) 404 406 (face font-lock-keyword-face fontified t) 406 424 (fontified t)) . 32849) (undo-tree-id306 . -388) (undo-tree-id307 . -388) (undo-tree-id308 . -423) (undo-tree-id309 . -388) 33237) nil (26718 17874 667126 252000) 0 nil])
([nil nil ((#("
Kuttybay N.- acting associate professor, PhD, Kazakh National University named after аl-Farabi, Almaty, Kazakhstan, e-mail: Nurjigit.10.93@gmail.com; 
Baibolov O.- Master's student, 1st year, Al-Farabi Kazakh National University, Almaty, Kazakhstan, 
e-mail:baibolov_olzhas2@kaznu.kz. 
" 0 1 (fontified t) 1 151 (fontified t) 151 152 (fontified t) 152 268 (fontified t) 268 269 (face (subscript) fontified t display (raise -0.2)) 269 286 (fontified t) 286 287 (fontified t rear-nonsticky t)) . 32511) (undo-tree-id284 . -252) (undo-tree-id285 . -252) (undo-tree-id286 . -286) (undo-tree-id287 . -287) (undo-tree-id288 . -287) (undo-tree-id289 . -287) (undo-tree-id290 . -287) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1)) nil (26718 17874 667124 118000) 0 nil])
([nil nil ((nil rear-nonsticky nil 32560 . 32561) (#("
" 0 1 (fontified nil rear-nonsticky t)) . -32847) (32560 . 32848) 32512) nil (26718 17874 667114 79000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32848) (undo-tree-id283 . -1)) nil (26718 17874 667113 357000) 0 nil])
([nil nil ((32160 . 32161) 32142) nil (26718 17874 667112 135000) 0 nil])
([nil nil ((32200 . 32201) 32162) nil (26718 17874 667111 404000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 32161) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1)) nil (26718 17874 667106 885000) 0 nil])
([nil nil ((32335 . 32336) (t 26718 17874 670117 490000) 32300) nil (26718 17908 925961 516000) 0 nil])
([nil nil ((32714 . 32715) 32663) nil (26718 17908 925961 65000) 0 nil])
([nil nil ((32831 . 32832)) nil (26718 17908 925960 324000) 0 nil])
([nil nil ((32493 . 32494)) nil (26718 17908 925955 555000) 0 nil])
([nil nil ((32311 . 32314) (t 26718 17908 928352 165000)) nil (26718 17933 669048 606000) 0 nil])
([nil current ((32827 . 32830)) nil (26718 17933 669045 49000) 0 nil])
nil
